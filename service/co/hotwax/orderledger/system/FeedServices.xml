<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://moqui.org/xsd/service-definition-3.xsd">

    <service verb="consume" noun="OMSFeed" transaction-timeout="1800">
        <implements service="org.moqui.impl.SystemMessageServices.consume#SystemMessage"/>
        <in-parameters>
            <parameter name="systemMessageId" type="String" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="sendSmrId" type="String"/>
        </out-parameters>
        <actions>
            <!-- Fetch the SystemMessage record and the JSON file path-->
            <entity-find-one entity-name="moqui.service.message.SystemMessageAndType" value-field="systemMessage"/>
            <set field="filePathRef" from="systemMessage.messageText"/>

            <set field="nowDatetime" from="ec.user.nowTimestamp"/>

            <!-- Prepare error file -->
            <set field="fileName" from="filePathRef.substring(filePathRef.lastIndexOf('/')+1)"/>
            <set field="fileNameArray" from="fileName.split('\\.')"/>
            <set field="errorFileName" from="fileNameArray[0] + '-Error.' + fileNameArray[1]"/>
            <set field="errorFilePathRef" from="ec.resource.expand(systemMessage.sendPath, null, [contentRoot: ec.user.getPreference('mantle.content.root') ?: 'dbresource://datamanager', date:ec.l10n.format(nowDatetime, 'yyyy-MM-dd'), dateTime:ec.l10n.format(nowDatetime, 'yyyy-MM-dd-HH-mm-ss-SSS')], false) + '/error/' + errorFileName"/>
            <set field="errorJsonFilePath" from="ec.resource.getLocationReference(errorFilePathRef).getUri().getPath()"/>
            <!-- Create the error file on disk -->
            <script>
                import com.fasterxml.jackson.core.JsonGenerator
                import com.fasterxml.jackson.core.JsonFactory
                import com.fasterxml.jackson.databind.ObjectMapper
                import java.nio.charset.StandardCharsets

                try {
                    File errorFile = new File(errorJsonFilePath)
                    if (!errorFile.parentFile.exists()) errorFile.parentFile.mkdirs()
                    JsonFactory jfactory = new JsonFactory()

                    /* Declaring the PrintWriter and JsonGenerator resources in the try statement,
                    so that they are automatically closed regardless of whether the try statement completes normally or abruptly. */
                    try (PrintWriter pw = new PrintWriter(StandardCharsets.UTF_8, errorFile);
                            JsonGenerator jGenerator = jfactory.createGenerator(pw)) {
                        jGenerator.writeStartArray()
            </script>

            <!-- Get the JSON file text content using the file path -->
            <set field="jsonText" from="ec.resource.getLocationReference(filePathRef).getText()"/>
            <set field="jsonList" from="org.moqui.impl.context.ContextJavaUtil.jacksonMapper.readValue(jsonText, List.class)"/>
            <if condition="!jsonList">
                <return type="warning" error="true" message="System message [${systemMessageId}] for Type [${systemMessage?.systemMessageTypeId}] has messageText [${systemMessage.messageText}], with feed file having incorrect data and may contain null, not consuming the feed file."/>
            </if>

            <!-- Iterate through jsonList and for each entry call systemMessage.sendService in a new transaction -->
            <iterate list="jsonList" entry="jsonEntry">
                <script>
                    /* Calling the sendService in this way will allow us to identify
                        if the service execution had exception or returned error so we can prepare the error file */
                    actionResult = ec.service.sync().name(systemMessage.sendServiceName)
                    .parameters([payload:jsonEntry])
                    .requireNewTransaction(true)
                    .call()
                    if (ec.message.hasError()) {
                        jsonEntry.put("error", ec.message.getErrorsString())
                        ec.logger.warn(ec.message.getErrorsString())
                        ec.message.clearAll()

                        // write the jsonEntry to the Errorfile
                        new ObjectMapper()
                        .setDateFormat(new java.text.SimpleDateFormat(System.getProperty("default_date_time_format")))
                        .writerWithDefaultPrettyPrinter().writeValue(jGenerator,["json":jsonEntry])
                    }
                </script>
            </iterate>

            <!-- Close the error file -->
            <script>
                        jGenerator.writeEndArray()
                    }
                } catch (IOException e) {
                    logger.error("Error preparing OMS JSON Feed file", e)
                }
            </script>

            <!-- Create SystemMessage record for the error file path reference -->
            <!-- Creating the system message in SmsgProduced status and isOutgoing = 'N' because
                 if send#AllProducedSystemMessage job is scheduled then it will pick all the system messages
                 in 'SmsgProduced' status and isOutgoing = 'Y' hence the service job will pick these system messages
                 as well and will fail for these as there is no sendServiceName configured for FeedErrorFile system message type. -->
            <service-call name="create#moqui.service.message.SystemMessage" out-map="context"
                    in-map="[systemMessageTypeId:'FeedErrorFile', messageText:errorJsonFilePath,
                    parentMessageId:systemMessage.systemMessageId,statusId:'SmsgProduced', isOutgoing:'N',
                    initDate:ec.user.nowTimestamp]"/>
        </actions>
    </service>
    <service verb="transform" noun="JsonLToJsonForUpdatedProducts">
        <description>
            This service transforms JSON Lines into a nested JSON object for Shopify Products,
            using an input path to read the JSONL file and an output path to write the resulting
            JSON maps and forwards the products eligble for update.
        </description>
        <in-parameters>
            <parameter name="inputPath" required="true"/>
            <parameter name="additionalParameters" type="Map"/>
            <parameter name="systemMessageId" required="true"/>
            <parameter name="shopId" required="true"/>
        </in-parameters>
        <actions>
            <set field="virtualProduct" from="[:]"/>
            <set field="variants" from="[]"/>
            <set field="metafields" from="[]"/>
            <set field="virtualProductId" value=""/>
            <script><![CDATA[
                import java.nio.charset.StandardCharsets
                import org.apache.commons.codec.digest.DigestUtils
                import org.moqui.impl.context.ContextJavaUtil

                def hash = { listOrMap ->
                    if (listOrMap instanceof Map) {
                        return DigestUtils.sha256Hex(ContextJavaUtil.jacksonMapper.writeValueAsString(listOrMap.sort()))
                    } else if (listOrMap instanceof List) {
                        return DigestUtils.sha256Hex(listOrMap.collect { it.toString() }.sort().join("||"))
                    } else {
                        return DigestUtils.sha256Hex(listOrMap?.toString() ?: "")
                    }
                }
                def compareValues = { incomingParamValue, paramValue ->
                    if (incomingParamValue == paramValue) {
                        return true
                    } else if (incomingParamValue instanceof String && paramValue instanceof String) {
                        return incomingParamValue == paramValue
                    } else if (incomingParamValue instanceof List && paramValue instanceof List) {
                        return incomingParamValue.sort() == paramValue.sort()
                    } else if (incoingParamValue instanceof Map && paramValue instanceof Map) {
                        return hash(incomingParamValue) == hash(paramValue)
                    }
                    return false
                }
                try(InputStream inputStream = ec.resource.getLocationStream(inputPath);
                BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8))) {
                    String line
                    int sequenceIndex = 1
                    while ((line = reader.readLine()) != null) {
                        Map jsonLine = ContextJavaUtil.jacksonMapper.readValue(line, Map.class)
                        String id = jsonLine.get("id") as String

                        boolean isVirtual = !jsonLine.containsKey("__parentId")
                        boolean isVariant = id.contains("/ProductVariant/")
                        boolean isMetafield = id.contains("/Metafield/")

                        if (isVirtual) {
                            boolean skipProductImport = false
                            additionalParameters.each { paramName, paramValue ->
                                if (jsonLine.containsKey(paramName) && compareValues(jsonLine[paramName], paramValue)) {
                                    skipProductImport = true
                                    return
                                }
                            }
                            if (skipProductImport) {
                                continue
                            }
                            // Process previous virtual group
                            if (virtualProduct) {
                                variantIds = []
                                virtualResult = ec.service.sync().name("co.hotwax.orderledger.product.ProductServices.compare#VirtualProduct")
                                    .parameters([productJson: virtualProduct, systemMessageId: systemMessageId, shopId: shopId])
                                    .call()

                                forCreate = virtualResult?.forCreate ?: false
                                virtualProductId = virtualResult?.virtualProductId

                                // Compare all variants
                                for (Map variant : variants) {
                                    result = ec.service.sync().name("co.hotwax.orderledger.product.ProductServices.compare#VariantProduct")
                                        .parameters([variantJson: variant, systemMessageId: systemMessageId, shopId: shopId])
                                        .call()

                                    if (variant?.id) {
                                        variantIds.add([variant.id, sequenceIndex])
                                        sequenceIndex++
                                    }
                                }

                                // Compare metafields
                                for (Map metafield : metafields) {
                                    metafield.put("productId", virtualProduct.id)
                                    ec.service.sync().name("co.hotwax.orderledger.product.ProductServices.compare#VirtualProduct")
                                        .parameters([productJson: metafield, systemMessageId: systemMessageId, shopId: shopId])
                                        .call()
                                }

                                // Assocs handling
                                if (variantIds) {
                                    sortedAssocs = variantIds.sort { a, b -> a[1] <=> b[1] }  // Collect only the variant ID
                                    assocsHash = hash(sortedAssocs)

                                    productUpdateHistory = ec.entity.find("co.hotwax.product.ProductUpdateHistory")
                                        .condition("productId", virtualProductId)
                                        .condition("shopId", shopId)
                                        .useCache(false)
                                        .one()

                                    Map existingDiffMap = [:]
                                    if (productUpdateHistory?.differenceMap) {
                                        try {
                                            existingDiffMap = ContextJavaUtil.jacksonMapper.readValue(productUpdateHistory.differenceMap, Map.class)
                                        } catch (Exception e) {
                                            logger.warn("Could not parse differenceMap for productId=${virtualProductId}: ${e.message}")
                                        }
                                    }

                                    updateParams = [
                                        productId: virtualProductId,
                                        shopId: shopId,
                                        differenceMap: existingDiffMap
                                    ]
                                    if (forCreate) {
                                        existingDiffMap.assocs = [added: variantIds.collect { [id: it[0], sequenceNumber: it[1]] }, removed: []]
                                        updateParams.assocs = ContextJavaUtil.jacksonMapper.writeValueAsString(variantIds)
                                        updateParams.assocsHash = assocsHash
                                    } else {
                                        existingAssocs = ContextJavaUtil.jacksonMapper.readValue(productUpdateHistory.assocs ?: "[]", List.class)
                                        existingAssocsSorted = existingAssocs.sort { a, b -> a[1] <=> b[1] }
                                        existingAssocsHash = productUpdateHistory?.assocsHash


                                        if (!existingAssocsHash || existingAssocsHash != assocsHash) {
                                            added = sortedAssocs.findAll { it !in existingAssocsSorted }.collect { [id: it[0], sequenceNumber: it[1]] }
                                            removed = existingAssocsSorted.findAll { it[0] !in sortedAssocs*.get(0) }.collect { [id: it[0], sequenceNumber: it[1]] }
                                            existingDiffMap.assocs = [added: added, removed: removed]
                                            updateParams.assocs = ContextJavaUtil.jacksonMapper.writeValueAsString(variantIds)
                                            updateParams.assocsHash = assocsHash
                                        } else {
                                            existingDiffMap.assocs = [added: [], removed: []]
                                        }
                                    }

                                    updateParams.differenceMap = ContextJavaUtil.jacksonMapper.writeValueAsString(existingDiffMap)

                                    ec.service.sync().name("update#co.hotwax.product.ProductUpdateHistory")
                                        .requireNewTransaction(true)
                                        .parameters(updateParams)
                                        .call()
                                }

                                variants.clear()
                                metafields.clear()
                            }
                            sequenceIndex = 1
                            virtualProduct = jsonLine

                        } else if (isVariant) {
                            variants.add(jsonLine)
                        } else if (isMetafield) {
                            metafields.add(jsonLine)
                        }
                    }

                    // Final group
                    if (virtualProduct) {
                        boolean skipProductImport = false
                        additionalParameters.each { paramName, paramValue ->
                            if (virtualProduct.containsKey(paramName) && compareValues(virtualProduct[paramName], paramValue)) {
                               skipProductImport = true
                               return
                            }
                        }
                        if (!skipProductImport) {
                        def variantIds = []
                        virtualResult = ec.service.sync().name("co.hotwax.orderledger.product.ProductServices.compare#VirtualProduct")
                            .parameters([productJson: virtualProduct, systemMessageId: systemMessageId, shopId: shopId])
                            .call()

                        def forCreate = virtualResult?.forCreate ?: false
                        virtualProductId = virtualResult?.virtualProductId

                        for (Map variant: variants) {
                            def result = ec.service.sync().name("co.hotwax.orderledger.product.ProductServices.compare#VariantProduct")
                                .parameters([variantJson: variant, systemMessageId: systemMessageId, shopId: shopId])
                                .call()
                            if (variant?.id) {
                                variantIds.add([variant.id, sequenceIndex])  // Add variant with sequence index
                                sequenceIndex++
                            }
                        }

                        for (Map metafield: metafields) {
                            metafield.put("productId", virtualProduct.id)
                            ec.service.sync().name("co.hotwax.orderledger.product.ProductServices.compare#VirtualProduct")
                                .parameters([productJson: metafield, systemMessageId: systemMessageId, shopId: shopId])
                                .call()
                        }

                        if (variantIds) {
                            sortedAssocs = variantIds.sort { a, b -> a[1] <=> b[1] }
                            assocsHash = hash(sortedAssocs)

                            productUpdateHistory = ec.entity.find("co.hotwax.product.ProductUpdateHistory")
                                .condition("productId", virtualProductId)
                                .condition("shopId", shopId)
                                .useCache(false)
                                .one()

                            Map existingDiffMap = [:]
                            if (productUpdateHistory?.differenceMap) {
                                try {
                                    existingDiffMap = ContextJavaUtil.jacksonMapper.readValue(productUpdateHistory.differenceMap, Map.class)
                                } catch (Exception e) {
                                    logger.warn("Could not parse differenceMap for productId=${virtualProductId}: ${e.message}")
                                }
                            }

                            updateParams = [
                                productId: virtualProductId,
                                shopId: shopId,
                                differenceMap: existingDiffMap
                            ]

                            if (forCreate) {
                                existingDiffMap.assocs = [added: variantIds.collect { [id: it[0], sequenceNumber: it[1]] }, removed: []]
                                updateParams.assocs = ContextJavaUtil.jacksonMapper.writeValueAsString(variantIds)
                                updateParams.assocsHash = assocsHash
                            } else {
                                existingAssocs = ContextJavaUtil.jacksonMapper.readValue(productUpdateHistory.assocs ?: "[]", List.class)
                                existingAssocsSorted = existingAssocs.sort { a, b -> a[1] <=> b[1] }
                                existingAssocsHash = productUpdateHistory?.assocsHash

                                if (!existingAssocsHash || existingAssocsHash != assocsHash) {
                                    added = sortedAssocs.findAll { it !in existingAssocsSorted }.collect { [id: it[0], sequenceNumber: it[1]] }
                                    removed = existingAssocsSorted.findAll { it[0] !in sortedAssocs*.get(0) }.collect { [id: it[0], sequenceNumber: it[1]] }
                                    existingDiffMap.assocs = [added: added, removed: removed]
                                    updateParams.assocs = ContextJavaUtil.jacksonMapper.writeValueAsString(variantIds)
                                    updateParams.assocsHash = assocsHash
                                } else {
                                    existingDiffMap.assocs = [added: [], removed: []]
                                }
                            }

                            updateParams.differenceMap = ContextJavaUtil.jacksonMapper.writeValueAsString(existingDiffMap)

                            ec.service.sync().name("update#co.hotwax.product.ProductUpdateHistory")
                                .requireNewTransaction(true)
                                .parameters(updateParams)
                                .call()
                        }
                        }
                    }
                } catch (Exception e) {
                        logger.error("Error processing JSON Lines for updated products", e)
                        throw e
                }
            ]]></script>
        </actions>
    </service>
    <service verb="consume" noun="OMSFeedNew" transaction-timeout="1800">
        <description>
            Orchestrates processing of product updates by iterating over ProductUpdateHistory entries
            and delegating each to the worker service in a new transaction.
        </description>
        <in-parameters>
            <parameter name="systemMessageId" required="true"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="moqui.service.message.SystemMessage" value-field="systemMessage"/>
            <entity-find-one entity-name="moqui.service.message.SystemMessageRemote" value-field="systemMessageRemote">
                <field-map field-name="systemMessageRemoteId" from="systemMessage.systemMessageRemoteId"/>
            </entity-find-one>
            <set field="shopId" from="systemMessageRemote?.internalId"/>
            <entity-find-one entity-name="co.hotwax.shopify.ShopifyShop" value-field="shopifyShop"/>
            <entity-find entity-name="co.hotwax.product.ProductUpdateHistory" list="productUpdateHistories">
                <econdition field-name="systemMessageId" from="systemMessage.parentMessageId"/>
                <econdition field-name="shopId" from="shopId"/>
                <order-by field-name="-parentProductId"/>
            </entity-find>

            <iterate list="productUpdateHistories" entry="productUpdateHistory">
                <service-call name="co.hotwax.orderledger.system.FeedServices.consume#ProductUpdateWorker"
                              in-map="[productUpdateHistory:productUpdateHistory, shopId:shopId]"
                              transaction="force-new"/>
            </iterate>
        </actions>
    </service>
    <service verb="consume" noun="ProductUpdateWorker" transaction-timeout="1800">
        <description>
            Processes a single ProductUpdateHistory entry for a shop, applying changes
            such as creating/updating products, features, associations, and Shopify records.
        </description>
        <in-parameters>
            <parameter name="productUpdateHistory" type="Map" required="true"/>
            <parameter name="shopId" required="true"/>
        </in-parameters>
        <actions>
            <script>
                diff = productUpdateHistory.differenceMap ? org.moqui.impl.context.ContextJavaUtil.jacksonMapper.readValue(productUpdateHistory.differenceMap, Map.class) : null
            </script>
            <if condition="!diff">
                <log level="warn" message="No differenceMap found for the productId: ${productUpdateHistory.productId}, skipping this entry."/>
                <return/>
            </if>
            <entity-find-one entity-name="co.hotwax.shopify.ShopifyShop" value-field="shopifyShop" cache="true"/>
            <entity-find-one entity-name="org.apache.ofbiz.product.store.ProductStore" value-field="productStore" cache="true">
                <field-map field-name="productStoreId" from="shopifyShop.productStoreId"/>
            </entity-find-one>
            <entity-find entity-name="co.hotwax.shopify.ShopifyShopProduct" list="shopifyShopProducts">
                <econdition field-name="shopifyProductId" from="productUpdateHistory.productId"/>
                <order-by field-name="lastUpdatedStamp"/>
            </entity-find>
            <set field="productId" from="shopifyShopProducts ? shopifyShopProducts[0].productId : null"/>

            <if condition="!productUpdateHistory.parentProductId">
                <set field="product" from="[:]"/>

                <if condition="diff.title">
                    <set field="product.productName" from="diff.title"/>
                </if>
                <if condition="diff.vendor">
                    <set field="product.brandName" from="diff.vendor"/>
                </if>
                <if condition="diff.featureImageUrl">
                    <set field="product.detailImageUrl" from="diff.featureImageUrl"/>
                </if>
                <if condition="diff.isGiftCard">
                    <set field="product.isGiftCard" from="diff.isGiftCard"/>
                </if>
                <if condition="diff.hasVariantsThatRequireComponents">
                    <set field="product.requiresComponents" from="diff.hasVariantsThatRequireComponents"/>
                </if>

                <set field="product.productTypeId" value="FINISHED_GOOD"/>
                <!-- Read from first variant for requireShipping if false then set to DIGITAL_GOOD -->
                <if condition="diff.hasVariantsThatRequiresComponents">
                    <set field="product.productTypeId" value="MARKETING_PKG_PICK"/>
                </if>
                <if condition="diff.isGiftCard">
                    <set field="product.productTypeId" value="FINISHED_GOOD"/>
                </if>
                <set field="product.isVirtual" value="Y"/>
                <set field="product.isVariant" value="N"/>
                <set field="product.inventoryItemTypeId" value="NON_SERIAL_INV_ITEM"/>

                <set field="product.createdDate" from="ec.user.nowTimestamp"/>
                <service-call name="co.hotwax.sob.product.ProductHelperServices.get#ProductStoreBrowseRootCategory"
                              in-map="[productStoreId:shopifyShop.productStoreId]" out-map="catResp"/>
                <if condition="catResp.categoryId">
                    <set field="product.primaryProductCategoryId" from="catResp.categoryId"/>
                </if>
                <if condition="diff.handle">
                    <set field="product.internalName" from="'V_' + diff.handle"/>
                </if>

                <if condition="productId">
                    <set field="product.productId" from="productId"/>
                </if>
                <service-call name="store#org.apache.ofbiz.product.product.Product"
                              in-map="product" out-map="prodOut"/>
                <set field="productId" from="productId ?: prodOut.productId"/>

                <if condition="diff.tags?.added">
                    <entity-find entity-name="org.apache.ofbiz.product.product.ProductKeyword" list="productKeywords">
                        <econdition field-name="productId" from="productId"/>
                        <econdition field-name="keywordTypeId" value="KWT_TAG"/>
                    </entity-find>
                    <iterate list="diff.tags.added" entry="kw">
                        <if condition="!productKeywords?.find{ it.keyword == kw }">
                            <service-call name="store#org.apache.ofbiz.product.product.ProductKeyword"
                                          in-map="[productId:productId, keywordTypeId:'KWT_TAG', statusId:'KW_APPROVED', keyword:kw]"/>
                        </if>
                    </iterate>
                </if>
                <if condition="diff.tags?.removed">
                    <iterate list="diff.tags.removed" entry="kw">
                        <service-call name="delete#org.apache.ofbiz.product.product.ProductKeyword"
                                      in-map="[productId:productId, keywordTypeId:'KWT_TAG', keyword:kw]"/>
                    </iterate>
                </if>

                <if condition="diff.features?.added">
                    <iterate list="diff.features.added" entry="featureString">
                        <script>
                            def featureParts = featureString.split("/")
                            sequenceNum = featureParts[1] as Integer
                            productFeatureTypeDesc = featureParts[2].trim()
                            featureDesc = featureParts[3].trim()
                        </script>

                        <!-- Fetch productFeatureTypeId -->
                        <entity-find entity-name="org.apache.ofbiz.product.feature.ProductFeatureType" list="productFeatureTypes">
                            <econdition field-name="description" from="productFeatureTypeDesc"/>
                        </entity-find>

                        <if condition="productFeatureTypes">
                            <set field="productFeatureTypeId" from="productFeatureTypes[0].productFeatureTypeId"/>
                            <else>
                                <service-call name="store#org.apache.ofbiz.product.feature.ProductFeatureType"
                                              in-map="[description:productFeatureTypeDesc]"
                                              out-map="createdFeatureType"/>
                                <set field="productFeatureTypeId" from="createdFeatureType.productFeatureTypeId"/>
                            </else>
                        </if>

                        <!-- Fetch productFeatureId -->
                        <entity-find entity-name="org.apache.ofbiz.product.feature.ProductFeature" list="productFeatures">
                            <econdition field-name="description" from="featureDesc"/>
                            <econdition field-name="productFeatureTypeId" from="productFeatureTypeId"/>
                        </entity-find>

                        <if condition="productFeatures">
                            <set field="productFeatureId" from="productFeatures[0].productFeatureId"/>
                            <else>
                                <service-call name="store#org.apache.ofbiz.product.feature.ProductFeature"
                                              in-map="[productFeatureTypeId:productFeatureTypeId, description:featureDesc]"
                                              out-map="createdFeature"/>
                                <set field="productFeatureId" from="createdFeature.productFeatureId"/>
                            </else>
                        </if>

                        <!-- Create ProductFeatureAppl -->
                        <service-call name="store#org.apache.ofbiz.product.feature.ProductFeatureAppl"
                                      in-map="[productId:productId,
                           productFeatureId:productFeatureId,
                           productFeatureApplTypeId:'STANDARD_FEATURE',
                           sequenceNum:sequenceNum]"/>
                    </iterate>
                </if>
                <if condition="diff.features?.removed">
                    <iterate list="diff.features.removed" entry="featureString">
                        <script>
                            def featureParts = featureString.split("/")
                            sequenceNum = featureParts[1] as Integer
                            productFeatureTypeDesc = featureParts[2].trim()
                            featureDesc = featureParts[3].trim()
                        </script>

                        <!-- Fetch productFeatureTypeId -->
                        <entity-find entity-name="org.apache.ofbiz.product.feature.ProductFeatureType" list="productFeatureTypes">
                            <econdition field-name="description" from="productFeatureTypeDesc"/>
                        </entity-find>

                        <if condition="productFeatureTypes">
                            <set field="productFeatureTypeId" from="productFeatureTypes[0].productFeatureTypeId"/>
                        </if>

                        <!-- Fetch productFeatureId -->
                        <entity-find entity-name="org.apache.ofbiz.product.feature.ProductFeature" list="productFeatures">
                            <econdition field-name="description" from="featureDesc"/>
                            <econdition field-name="productFeatureTypeId" from="productFeatureTypeId"/>
                        </entity-find>

                        <if condition="productFeatures">
                            <set field="productFeatureId" from="productFeatures[0].productFeatureId"/>
                            <entity-find-one entity-name="org.apache.ofbiz.product.feature.ProductFeatureAppl" value-field="productFeatureAppl">
                                <field-map field-name="productId"/>
                                <field-map field-name="productFeatureId"/>
                                <field-map field-name="productFeatureApplTypeId" value="STANDARD_FEATURE"/>
                            </entity-find-one>
                            <if condition="productFeatureAppl">
                                <!-- Delete ProductFeatureAppl -->
                                <service-call name="delete#org.apache.ofbiz.product.feature.ProductFeatureAppl" in-map="productFeatureAppl"/>
                            </if>
                        </if>
                    </iterate>
                </if>

                <if condition="diff.assocs?.added">
                    <entity-find entity-name="org.apache.ofbiz.product.product.ProductAssoc" list="productAssocs">
                        <econdition field-name="productId" from="productId"/>
                        <econdition field-name="productAssocTypeId" value="PRODUCT_VARIANT"/>
                        <date-filter/>
                    </entity-find>
                    <iterate list="diff.assocs?.added" entry="variantProduct">
                        <entity-find-one entity-name="co.hotwax.shopify.ShopifyShopProduct" value-field="shopifyShopProduct">
                            <field-map field-name="shopId" from="shopId"/>
                            <field-map field-name="shopifyProductId" from="co.hotwax.sob.shopify.ShopifyHelper.resolveShopifyGid(variantProduct.id)"/>
                        </entity-find-one>
                        <if condition="shopifyShopProduct">
                            <if condition="productAssocs?.find{ it.productIdTo == shopifyShopProduct.productId &amp;&amp; it.sequenceNum == variantProduct.sequenceNumber }">
                                <continue/>
                            </if>
                            <set field="existingProductAssoc" from="productAssocs?.find{ it.productIdTo == shopifyShopProduct.productId &amp;&amp; it.sequenceNum != variantProduct.sequenceNumber }"/>
                            <if condition="existingProductAssoc">
                                <service-call name="update#org.apache.ofbiz.product.product.ProductAssoc"
                                              in-map="[productIdTo:shopifyShopProduct.productId, productId:productId, productAssocTypeId:'PRODUCT_VARIANT', fromDate: existingProductAssoc.fromDate, sequenceNum:variantProduct.sequenceNumber]"/>
                                <else>
                                    <service-call name="create#org.apache.ofbiz.product.product.ProductAssoc"
                                                  in-map="[productIdTo:shopifyShopProduct.productId, productId:productId, productAssocTypeId:'PRODUCT_VARIANT', fromDate:ec.user.nowTimestamp, sequenceNum:variantProduct.sequenceNumber]"/>
                                </else>
                            </if>
                        </if>
                    </iterate>
                </if>
                <if condition="diff.assocs?.removed">
                    <iterate list="diff.assocs?.removed" entry="variantProduct">
                        <entity-find-one entity-name="co.hotwax.shopify.ShopifyShopProduct" value-field="shopifyShopProduct">
                            <field-map field-name="shopId" from="shopId"/>
                            <field-map field-name="shopifyProductId" from="co.hotwax.sob.shopify.ShopifyHelper.resolveShopifyGid(variantProduct.id)"/>
                        </entity-find-one>
                        <if condition="shopifyShopProduct">
                            <entity-find entity-name="org.apache.ofbiz.product.product.ProductAssoc" list="productAssocs">
                                <econdition field-name="productId" from="productId"/>
                                <econdition field-name="productIdTo" from="shopifyShopProduct.productId"/>
                                <econdition field-name="productAssocTypeId" value="PRODUCT_VARIANT"/>
                                <date-filter/>
                            </entity-find>
                            <service-call name="delete#org.apache.ofbiz.product.product.ProductAssoc" in-map="productAssocs[0]"/>
                        </if>
                    </iterate>
                </if>
                <entity-find-one entity-name="co.hotwax.shopify.ShopifyShopProduct" value-field="shopifyShopProduct">
                    <field-map field-name="shopifyProductId" from="productUpdateHistory.productId"/>
                    <field-map field-name="shopId" from="shopId"/>
                </entity-find-one>
                <if condition="!shopifyShopProduct">
                    <service-call name="create#co.hotwax.shopify.ShopifyShopProduct"
                                  in-map="[productId:productId, shopId:shopId, shopifyProductId:productUpdateHistory.productId]"/>
                </if>
                <else>
                    <set field="product" from="[:]"/>

                    <if condition="diff.title">
                        <set field="product.productName" from="diff.title"/>
                    </if>
                    <if condition="diff.price">
                        <set field="product.price" from="diff.price"/>
                    </if>
                    <if condition="diff.featureImageUrl">
                        <set field="product.detailImageUrl" from="diff.featureImageUrl"/>
                    </if>

                    <set field="product.productTypeId" value="FINISHED_GOOD"/>
                    <if condition="diff.requiresShipping == false">
                        <set field="product.productTypeId" value="DIGITAL_GOOD"/>
                    </if>
                    <if condition="diff.requiresComponents == true">
                        <set field="product.productTypeId" value="MARKETING_PKG_PICK"/>
                    </if>
                    <if condition="diff.isGiftCard == true">
                        <set field="product.productTypeId" value="FINISHED_GOOD"/>
                    </if>
                    <set field="product.inventoryItemTypeId" value="NON_SERIAL_INV_ITEM"/>
                    <set field="product.isVariant" value="Y"/>
                    <set field="product.isVirtual" value="N"/>
                    <set field="product.createdDate" from="ec.user.nowTimestamp"/>
                    <service-call name="co.hotwax.sob.product.ProductHelperServices.get#ProductStoreBrowseRootCategory"
                                  in-map="[productStoreId:shopifyShop.productStoreId]" out-map="catResp"/>
                    <if condition="catResp.categoryId">
                        <set field="product.primaryProductCategoryId" from="catResp.categoryId"/>
                    </if>

                    <if condition="diff.weightUnit">
                        <service-call name="co.hotwax.sob.shopify.ShopifyHelperServices.get#ShopifyShopTypeMapping" in-map="[shopId:shopId, mappedTypeId:'SHOPIFY_WEIGHT_UNIT', mappedKey:diff.weightUnit]" out-map="weightUnitMapping"/>
                        <if condition="weightUnitMapping">
                            <set field="product.weightUomId" from="weightUnitMapping.mappedValue"/>
                        </if>
                    </if>
                    <if condition="diff.weightValue">
                        <set field="product.shippingWeight" from="diff.weightValue"/>
                        <set field="product.productWeight" from="diff.weightValue"/>
                    </if>


                    <if condition="diff.price">
                        <entity-find entity-name="org.apache.ofbiz.product.price.ProductPrice" list="productPriceList">
                            <econdition field-name="productId" from="productId"/>
                            <econdition field-name="productPriceTypeId" value="LIST_PRICE"/>
                            <econdition field-name="productPricePurposeId" value="PURCHASE"/>
                            <econdition field-name="currencyUomId" from="productStore.defaultCurrencyUomId"/>
                            <econdition field-name="productStoreGroupId" from="productStore.primaryStoreGroupId"/>
                            <date-filter/>
                        </entity-find>

                        <!-- If productPriceList and price is updated then set the values from the list if not then set the values from the incoming productPrices -->
                        <if condition="productPriceList"><then>
                            <set field="product.prices" from="[productPriceTypeId:'LIST_PRICE', productPricePurposeId:'PURCHASE',
                                    currencyUomId:productStore.defaultCurrencyUomId, price:diff.price, productStoreGroupId:productStore.primaryStoreGroupId,
                                    fromDate:productPriceList[0].fromDate]"/>
                        </then><else>
                            <set field="product.prices" from="[productPriceTypeId:'LIST_PRICE', productPricePurposeId:'PURCHASE',
                                    currencyUomId:productStore.defaultCurrencyUomId, price:diff.price, productStoreGroupId:productStore.primaryStoreGroupId,
                                    fromDate:ec.user.nowTimestamp]"/>
                        </else>
                        </if>
                    </if>
                    <if condition="productStore.productIdentifierEnumId == 'SHOPIFY_PRODUCT_SKU'">
                        <set field="productIdentifier" from="diff.identifications?.sku"/>
                        <else-if condition="productStore.productIdentifierEnumId == 'SHOPIFY_BARCODE'">
                            <set field="productIdentifier" from="diff.identifications?.barcode"/>
                        </else-if>
                        <else-if condition="productStore.productIdentifierEnumId == 'SHOPIFY_PRODUCT_ID'">
                            <set field="productIdentifier" from="productUpdateHistory.productId"/>
                        </else-if>
                    </if>

                    <!-- If productIdentifier present, fetch the product -->
                    <if condition="productIdentifier">
                        <set field="product.internalName" from="productIdentifier"/>
                    </if>
                    <if condition="productId">
                        <set field="product.productId" from="productId"/>
                    </if>

                    <service-call name="store#org.apache.ofbiz.product.product.Product"
                                  in-map="product" out-map="prodOut"/>

                    <set field="productId" from="productId ?: prodOut.productId"/>

                    <if condition="diff.parentProductId">
                        <entity-find-one entity-name="co.hotwax.shopify.ShopifyShopProduct" value-field="virtualProduct">
                            <field-map field-name="shopId" from="shopId"/>
                            <field-map field-name="shopifyProductId" from="diff.parentProductId"/>
                        </entity-find-one>
                        <if condition="virtualProduct">
                            <entity-find entity-name="org.apache.ofbiz.product.product.ProductAssoc" list="paCheck">
                                <econdition field-name="productId" from="virtualProduct.productId"/>
                                <econdition field-name="productIdTo" from="productId"/>
                                <econdition field-name="productAssocTypeId" value="PRODUCT_VARIANT"/>
                            </entity-find>
                            <if condition="!paCheck">
                                <service-call name="create#org.apache.ofbiz.product.product.ProductAssoc"
                                              in-map="[productIdTo:productId, productId:virtualProduct.productId, productAssocTypeId:'PRODUCT_VARIANT', fromDate: ec.user.nowTimestamp]"/>
                            </if>
                        </if>
                    </if>

                    <if condition="diff.tags?.added">
                        <iterate list="diff.tags?.added" entry="kw">
                            <service-call name="store#org.apache.ofbiz.product.product.ProductKeyword"
                                          in-map="[productId:productId, keywordTypeId:'KWT_TAG', statusId:'KW_APPROVED', keyword:kw]"/>
                        </iterate>
                    </if>
                    <if condition="diff.tags?.removed">
                        <iterate list="diff.tags.removed" entry="kw">
                            <service-call name="delete#org.apache.ofbiz.product.product.ProductKeyword"
                                          in-map="[productId:productId, keywordTypeId:'KWT_TAG', keyword:kw]"/>
                        </iterate>
                    </if>

                    <if condition="diff.features?.added">
                        <iterate list="diff.features?.added" entry="featureString">
                            <script>
                                def featureParts = featureString.split("/")
                                if (featureParts.size() == 2) {
                                    productFeatureTypeDesc = featureParts[0].trim()
                                    featureDesc = featureParts[1].trim()
                                } else {
                                    sequenceNum = featureParts[0] as Integer
                                    productFeatureTypeDesc = featureParts[1].trim()
                                    featureDesc = featureParts[2].trim()
                                }
                            </script>

                            <!-- Fetch productFeatureTypeId -->
                            <entity-find entity-name="org.apache.ofbiz.product.feature.ProductFeatureType" list="productFeatureTypes">
                                <econdition field-name="description" from="productFeatureTypeDesc"/>
                            </entity-find>

                            <if condition="productFeatureTypes">
                                <set field="productFeatureTypeId" from="productFeatureTypes[0].productFeatureTypeId"/>
                                <else>
                                    <service-call name="store#org.apache.ofbiz.product.feature.ProductFeatureType"
                                                  in-map="[description:productFeatureTypeDesc]"
                                                  out-map="createdFeatureType"/>
                                    <set field="productFeatureTypeId" from="createdFeatureType.productFeatureTypeId"/>
                                </else>
                            </if>

                            <!-- Fetch productFeatureId -->
                            <entity-find entity-name="org.apache.ofbiz.product.feature.ProductFeature" list="productFeatures">
                                <econdition field-name="description" from="featureDesc"/>
                                <econdition field-name="productFeatureTypeId" from="productFeatureTypeId"/>
                            </entity-find>

                            <if condition="productFeatures">
                                <set field="productFeatureId" from="productFeatures[0].productFeatureId"/>
                                <else>
                                    <service-call name="store#org.apache.ofbiz.product.feature.ProductFeature"
                                                  in-map="[productFeatureTypeId:productFeatureTypeId, description:featureDesc]"
                                                  out-map="createdFeature"/>
                                    <set field="productFeatureId" from="createdFeature.productFeatureId"/>
                                </else>
                            </if>

                            <!-- Create ProductFeatureAppl -->
                            <service-call name="store#org.apache.ofbiz.product.feature.ProductFeatureAppl"
                                          in-map="[productId:productId,
                           productFeatureId:productFeatureId,
                           productFeatureApplTypeId:'STANDARD_FEATURE',
                           sequenceNum:sequenceNum]"/>
                        </iterate>
                    </if>
                    <if condition="diff.features?.removed">
                        <iterate list="diff.features?.removed" entry="featureString">
                            <script>
                                def featureParts = featureString.split("/")
                                if (featureParts.size() == 2) {
                                    productFeatureTypeDesc = featureParts[0].trim()
                                    featureDesc = featureParts[1].trim()
                                } else {
                                    sequenceNum = featureParts[0] as Integer
                                    productFeatureTypeDesc = featureParts[1].trim()
                                    featureDesc = featureParts[2].trim()
                                }
                            </script>

                            <!-- Fetch productFeatureTypeId -->
                            <entity-find entity-name="org.apache.ofbiz.product.feature.ProductFeatureType" list="productFeatureTypes">
                                <econdition field-name="description" from="productFeatureTypeDesc"/>
                            </entity-find>

                            <if condition="productFeatureTypes">
                                <set field="productFeatureTypeId" from="productFeatureTypes[0].productFeatureTypeId"/>
                            </if>

                            <!-- Fetch productFeatureId -->
                            <entity-find entity-name="org.apache.ofbiz.product.feature.ProductFeature" list="productFeatures">
                                <econdition field-name="description" from="featureDesc"/>
                                <econdition field-name="productFeatureTypeId" from="productFeatureTypeId"/>
                            </entity-find>

                            <if condition="productFeatures">
                                <set field="productFeatureId" from="productFeatures[0].productFeatureId"/>
                                <entity-find entity-name="org.apache.ofbiz.product.feature.ProductFeatureAppl" list="productFeatureAppls">
                                    <econdition field-name="productId" from="productId"/>
                                    <econdition field-name="productFeatureId" from="productFeatureId"/>
                                    <econdition field-name="productFeatureApplTypeId" value="STANDARD_FEATURE"/>
                                </entity-find>
                                <entity-find-one entity-name="org.apache.ofbiz.product.feature.ProductFeatureAppl" value-field="productFeatureAppl">
                                    <field-map field-name="productId"/>
                                    <field-map field-name="productFeatureId"/>
                                    <field-map field-name="productFeatureApplTypeId" value="STANDARD_FEATURE"/>
                                </entity-find-one>
                                <if condition="productFeatureAppl">
                                    <!-- Delete ProductFeatureAppl -->
                                    <service-call name="delete#org.apache.ofbiz.product.feature.ProductFeatureAppl" in-map="productFeatureAppl"/>
                                </if>
                            </if>
                        </iterate>
                    </if>

                    <if condition="diff.identifications">
                        <entity-find entity-name="org.apache.ofbiz.product.product.GoodIdentification" list="goodIdentifications">
                            <econdition field-name="productId"/>
                            <date-filter/>
                        </entity-find>
                        <if condition="diff.identifications.sku">
                            <set field="goodIdentification" from="goodIdentifications.find { it.goodIdentificationTypeId == 'SKU' }"/>
                            <if condition="goodIdentification">
                                <if condition="goodIdentification.idValue &amp;&amp; !goodIdentification.idValue.equals(diff.identifications.sku)">
                                    <service-call name="update#org.apache.ofbiz.product.product.GoodIdentification"
                                                  in-map="[productId: productId, goodIdentificationTypeId: 'SKU', idValue: goodIdentification.idValue, fromDate: goodIdentification.fromDate, thruDate: ec.user.nowTimestamp]"/>
                                    <service-call name="create#org.apache.ofbiz.product.product.GoodIdentification"
                                                  in-map="[productId: productId, goodIdentificationTypeId: 'SKU', idValue: diff.identifications.sku, fromDate: ec.user.nowTimestamp]"/>
                                </if>
                                <else>
                                    <service-call name="create#org.apache.ofbiz.product.product.GoodIdentification"
                                                  in-map="[productId: productId, goodIdentificationTypeId: 'SKU', idValue: diff.identifications.sku, fromDate: ec.user.nowTimestamp]"/>
                                </else>
                            </if>
                        </if>
                        <if condition="diff.identifications.barcode">
                            <set field="goodIdentification" from="goodIdentifications.find { it.goodIdentificationTypeId == 'UPCA' }"/>
                            <if condition="goodIdentification">
                                <if condition="goodIdentification.idValue &amp;&amp; !goodIdentification.idValue.equals(diff.identifications.barcode)">
                                    <service-call name="update#org.apache.ofbiz.product.product.GoodIdentification"
                                                  in-map="[productId: productId, goodIdentificationTypeId: 'UPCA', idValue: goodIdentification.idValue, fromDate: goodIdentification.fromDate, thruDate: ec.user.nowTimestamp]"/>
                                    <service-call name="create#org.apache.ofbiz.product.product.GoodIdentification"
                                                  in-map="[productId: productId, goodIdentificationTypeId: 'UPCA', idValue: diff.identifications.barcode, fromDate: ec.user.nowTimestamp]"/>
                                </if>
                                <else>
                                    <service-call name="create#org.apache.ofbiz.product.product.GoodIdentification"
                                                  in-map="[productId: productId, goodIdentificationTypeId: 'UPCA', idValue: diff.identifications.barcode, fromDate: ec.user.nowTimestamp]"/>
                                </else>
                            </if>
                        </if>
                    </if>
                    <if condition="diff.id &amp;&amp; !productUpdateHistory.productId.equals(diff.id)">
                        <entity-find-one entity-name="co.hotwax.shopify.ShopifyShopProduct" value-field="shopifyShopProduct">
                            <field-map field-name="shopifyProductId" from="diff.id"/>
                            <field-map field-name="shopId" from="shopId"/>
                        </entity-find-one>
                        <if condition="!shopifyShopProduct">
                            <service-call name="create#co.hotwax.shopify.ShopifyShopProduct"
                                          in-map="[productId:productId, shopId:shopId, shopifyProductId:diff.id, shopifyInventoryItemId:co.hotwax.sob.shopify.ShopifyHelper.resolveShopifyGid(diff.inventoryItemId)]"/>
                        </if>
                    </if>
                    <entity-find entity-name="co.hotwax.shopify.ShopifyShopProduct" list="shopifyShopProducts">
                        <econdition field-name="shopifyProductId" from="productUpdateHistory.productId"/>
<!--                        <field-map field-name="shopId" from="shopId"/>-->
                    </entity-find>
                    <if condition="!shopifyShopProducts">
                        <service-call name="create#co.hotwax.shopify.ShopifyShopProduct"
                                      in-map="[productId:productId, shopId:shopId, shopifyProductId:productUpdateHistory.productId, shopifyInventoryItemId:co.hotwax.sob.shopify.ShopifyHelper.resolveShopifyGid(diff.inventoryItemId)]"/>
                    </if>
                </else>
            </if>
            <service-call name="co.hotwax.oms.search.SearchServices.call#CreateProductIndex"
                          in-map="[productId:productId, indexVariants:false]" ignore-error="true" transaction="force-new"/>
            <log level="info" message="Created/Updated, and Indexed product: ${productId} for shopId: ${shopId} successfully."/>
        </actions>
    </service>
</services>
