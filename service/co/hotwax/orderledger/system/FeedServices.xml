<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://moqui.org/xsd/service-definition-3.xsd">

    <service verb="consume" noun="OMSFeed" transaction-timeout="1800">
        <implements service="org.moqui.impl.SystemMessageServices.consume#SystemMessage"/>
        <in-parameters>
            <parameter name="systemMessageId" type="String" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="sendSmrId" type="String"/>
        </out-parameters>
        <actions>
            <!-- Fetch the SystemMessage record and the JSON file path-->
            <entity-find-one entity-name="moqui.service.message.SystemMessageAndType" value-field="systemMessage"/>
            <set field="filePathRef" from="systemMessage.messageText"/>

            <set field="nowDatetime" from="ec.user.nowTimestamp"/>

            <!-- Prepare error file -->
            <set field="fileName" from="filePathRef.substring(filePathRef.lastIndexOf('/')+1)"/>
            <set field="fileNameArray" from="fileName.split('\\.')"/>
            <set field="errorFileName" from="fileNameArray[0] + '-Error.' + fileNameArray[1]"/>
            <set field="errorFilePathRef" from="ec.resource.expand(systemMessage.sendPath, null, [contentRoot: ec.user.getPreference('mantle.content.root') ?: 'dbresource://datamanager', date:ec.l10n.format(nowDatetime, 'yyyy-MM-dd'), dateTime:ec.l10n.format(nowDatetime, 'yyyy-MM-dd-HH-mm-ss-SSS')], false) + '/error/' + errorFileName"/>
            <set field="errorJsonFilePath" from="ec.resource.getLocationReference(errorFilePathRef).getUri().getPath()"/>
            <!-- Create the error file on disk -->
            <script>
                import com.fasterxml.jackson.core.JsonGenerator
                import com.fasterxml.jackson.core.JsonFactory
                import com.fasterxml.jackson.databind.ObjectMapper
                import java.nio.charset.StandardCharsets

                try {
                    File errorFile = new File(errorJsonFilePath)
                    if (!errorFile.parentFile.exists()) errorFile.parentFile.mkdirs()
                    JsonFactory jfactory = new JsonFactory()

                    /* Declaring the PrintWriter and JsonGenerator resources in the try statement,
                    so that they are automatically closed regardless of whether the try statement completes normally or abruptly. */
                    try (PrintWriter pw = new PrintWriter(StandardCharsets.UTF_8, errorFile);
                            JsonGenerator jGenerator = jfactory.createGenerator(pw)) {
                        jGenerator.writeStartArray()
            </script>

            <!-- Get the JSON file text content using the file path -->
            <set field="jsonText" from="ec.resource.getLocationReference(filePathRef).getText()"/>
            <set field="jsonList" from="org.moqui.impl.context.ContextJavaUtil.jacksonMapper.readValue(jsonText, List.class)"/>
            <if condition="!jsonList">
                <return type="warning" error="true" message="System message [${systemMessageId}] for Type [${systemMessage?.systemMessageTypeId}] has messageText [${systemMessage.messageText}], with feed file having incorrect data and may contain null, not consuming the feed file."/>
            </if>

            <!-- Iterate through jsonList and for each entry call systemMessage.sendService in a new transaction -->
            <iterate list="jsonList" entry="jsonEntry">
                <script>
                    /* Calling the sendService in this way will allow us to identify
                        if the service execution had exception or returned error so we can prepare the error file */
                    actionResult = ec.service.sync().name(systemMessage.sendServiceName)
                    .parameters([payload:jsonEntry])
                    .requireNewTransaction(true)
                    .call()
                    if (ec.message.hasError()) {
                        jsonEntry.put("error", ec.message.getErrorsString())
                        ec.logger.warn(ec.message.getErrorsString())
                        ec.message.clearAll()

                        // write the jsonEntry to the Errorfile
                        new ObjectMapper()
                        .setDateFormat(new java.text.SimpleDateFormat(System.getProperty("default_date_time_format")))
                        .writerWithDefaultPrettyPrinter().writeValue(jGenerator,["json":jsonEntry])
                    }
                </script>
            </iterate>

            <!-- Close the error file -->
            <script>
                        jGenerator.writeEndArray()
                    }
                } catch (IOException e) {
                    logger.error("Error preparing OMS JSON Feed file", e)
                }
            </script>

            <!-- Create SystemMessage record for the error file path reference -->
            <!-- Creating the system message in SmsgProduced status and isOutgoing = 'N' because
                 if send#AllProducedSystemMessage job is scheduled then it will pick all the system messages
                 in 'SmsgProduced' status and isOutgoing = 'Y' hence the service job will pick these system messages
                 as well and will fail for these as there is no sendServiceName configured for FeedErrorFile system message type. -->
            <service-call name="create#moqui.service.message.SystemMessage" out-map="context"
                    in-map="[systemMessageTypeId:'FeedErrorFile', messageText:errorJsonFilePath,
                    parentMessageId:systemMessage.systemMessageId,statusId:'SmsgProduced', isOutgoing:'N',
                    initDate:ec.user.nowTimestamp]"/>
        </actions>
    </service>
    <service verb="consume" noun="OMSFeedNew" transaction-timeout="1800">
        <implements service="org.moqui.impl.SystemMessageServices.consume#SystemMessage"/>
        <actions>
            <entity-find-one entity-name="moqui.service.message.SystemMessage" value-field="systemMessage"/>
            <entity-find-one entity-name="moqui.service.message.SystemMessageRemote" value-field="systemMessageRemote">
                <field-map field-name="systemMessageRemoteId" from="systemMessage.systemMessageRemoteId"/>
            </entity-find-one>
            <set field="shopId" from="systemMessageRemote?.remoteId"/>
            <entity-find-one entity-name="co.hotwax.shopify.ShopifyShop" value-field="shopifyShop"/>

            <entity-find entity-name="co.hotwax.product.ProductUpdateHistory" list="productUpdateHistories">
                <econdition field-name="systemMessageId" from="systemMessageId"/>
            </entity-find>

            <entity-find-one entity-name="org.apache.ofbiz.product.store.ProductStore" value-field="productStore">
                <field-map field-name="productStoreId" from="shopifyShop.productStoreId"/>
                <select-field field-name="productStoreId"/>
                <select-field field-name="productIdentifierEnumId"/>
                <select-field field-name="defaultCurrencyUomId"/>
                <select-field field-name="primaryStoreGroupId"/>
            </entity-find-one>

            <if condition="!productStore">
                <return error="true" type="warning" message="No ProductStore found for the productStoreId: ${shopifyShop.productStoreId}."/>
            </if>

            <iterate list="productUpdateHistories" entry="productUpdateHistory">
                <script>
                    diff = productUpdateHistory.differenceMap ? new groovy.json.JsonSlurper().parseText(productUpdateHistory.differenceMap) : null
                </script>

                <entity-find entity-name="co.hotwax.shopify.ShopifyShopProduct" list="shopifyShopProduct">
                    <econdition field-name="shopifyProductId" from="productUpdateHistory.productId"/>
                    <econdition field-name="shopId" from="shopId"/>
                </entity-find>
                <set field="productId" from="shopifyShopProduct ? shopifyShopProduct[0].productId : null"/>

                <if condition="!productUpdateHistory.parentProductId">
                    <set field="product" from="[:]"/>

                    <if condition="diff.title">
                        <set field="product.productName" value="diff.title"/>
                    </if>
                    <if condition="diff.featureImageUrl">
                        <set field="product.productImageUrl" value="diff.featureImageUrl"/>
                    </if>
                    <if condition="diff.isGiftCard">
                        <set field="product.isGiftCard" from="diff.isGiftCard"/>
                    </if>
                    <if condition="diff.hasVariantsThatRequireComponents">
                        <set field="product.requiresComponents" from="diff.hasVariantsThatRequireComponents"/>
                    </if>

                    <set field="product.productTypeId" value="FINISHED_GOOD"/>
                    <if condition="!product.requiresShipping">
                        <set field="product.productTypeId" value="DIGITAL_GOOD"/>
                    </if>
                    <if condition="product.requiresComponents">
                        <set field="product.productTypeId" value="MARKETING_PKG_PICK"/>
                    </if>
                    <if condition="diff.isGiftCard">
                        <set field="product.productTypeId" value="FINISHED_GOOD"/>
                    </if>
                    <set field="product.isVirtual" value="Y"/>

                    <set field="product.createdDate" from="ec.user.nowTimestamp"/>
                    <service-call name="co.hotwax.sob.product.ProductHelperServices.get#ProductStoreBrowseRootCategory"
                                  in-map="[productStoreId:shopifyShop.productStoreId]" out-map="catResp"/>
                    <if condition="catResp.categoryId">
                        <set field="product.primaryProductCategoryId" from="catResp.categoryId"/>
                    </if>
                    <set field="product.internalName" from="'V_' + diff.handle"/>

                    <if condition="productId">
                        <set field="product.productId" from="productId"/>
                    </if>
                    <service-call name="store#org.apache.ofbiz.product.product.Product"
                                  in-map="product" out-map="prodOut"/>
                    <if condition="!productId">
                        <set field="productId" from="prodOut.productId"/>
                    </if>

                    <if condition="diff.tags.added">
                        <iterate list="diff.tags.added" entry="kw">
                            <service-call name="create#org.apache.ofbiz.product.product.ProductKeyword"
                                          in-map="[productId:productId, keywordTypeId:'KWT_TAG', statusId:'KW_APPROVED', keyword:kw]"/>
                        </iterate>
                    </if>
                    <if condition="diff.tags.removed">
                        <iterate list="diff.tags.removed" entry="kw">
                            <service-call name="delete#org.apache.ofbiz.product.product.ProductKeyword"
                                          in-map="[productId:productId, keywordTypeId:'KWT_TAG', keyword:kw]"/>
                        </iterate>
                    </if>

                    <if condition="differenceMap.features.added">
                        <iterate list="differenceMap.features.added" entry="featureString">
                            <script>
                                def featureParts = featureString.split("/")
                                def sequenceNum = featureParts[0] as Integer
                                def productFeatureTypeDesc = featureParts[1].trim()
                                def featureDesc = featureParts[2].trim()
                            </script>

                            <!-- Fetch productFeatureTypeId -->
                            <entity-find entity-name="org.apache.ofbiz.product.feature.ProductFeatureType" list="productFeatureTypes">
                                <econdition field-name="description" from="productFeatureTypeDesc"/>
                            </entity-find>

                            <if condition="productFeatureTypes">
                                <set field="productFeatureTypeId" from="productFeatureTypes[0].productFeatureTypeId"/>
                                <else>
                                    <service-call name="create#org.apache.ofbiz.product.feature.ProductFeatureType"
                                                  in-map="[description:productFeatureTypeDesc]"
                                                  out-map="createdFeatureType" transaction="force-new"/>
                                    <set field="productFeatureTypeId" from="createdFeatureType.productFeatureTypeId"/>
                                </else>
                            </if>

                            <!-- Fetch productFeatureId -->
                            <entity-find entity-name="org.apache.ofbiz.product.feature.ProductFeature" list="productFeatures">
                                <econdition field-name="description" from="featureDesc"/>
                                <econdition field-name="productFeatureTypeId" from="productFeatureTypeId"/>
                            </entity-find>

                            <if condition="productFeatures">
                                <set field="productFeatureId" from="productFeatures[0].productFeatureId"/>
                                <else>
                                    <service-call name="create#org.apache.ofbiz.product.feature.ProductFeature"
                                                  in-map="[productFeatureTypeId:productFeatureTypeId, description:featureDesc]"
                                                  out-map="createdFeature" transaction="force-new"/>
                                    <set field="productFeatureId" from="createdFeature.productFeatureId"/>
                                </else>
                            </if>

                            <!-- Create ProductFeatureAppl -->
                            <service-call name="create#org.apache.ofbiz.product.feature.ProductFeatureAppl"
                                          in-map="[productId:productId,
                               productFeatureId:productFeatureId,
                               productFeatureApplTypeId:'SELECTABLE_FEATURE',
                               sequenceNum:sequenceNum]"/>
                        </iterate>
                    </if>
                    <if condition="differenceMap.features.removed">
                        <iterate list="differenceMap.features.removed" entry="featureString">
                            <script>
                                def featureParts = featureString.split("/")
                                def sequenceNum = featureParts[0] as Integer
                                def productFeatureTypeDesc = featureParts[1].trim()
                                def featureDesc = featureParts[2].trim()
                            </script>

                            <!-- Fetch productFeatureTypeId -->
                            <entity-find entity-name="org.apache.ofbiz.product.feature.ProductFeatureType" list="productFeatureTypes">
                                <econdition field-name="description" from="productFeatureTypeDesc"/>
                            </entity-find>

                            <if condition="productFeatureTypes">
                                <set field="productFeatureTypeId" from="productFeatureTypes[0].productFeatureTypeId"/>
                            </if>

                            <!-- Fetch productFeatureId -->
                            <entity-find entity-name="org.apache.ofbiz.product.feature.ProductFeature" list="productFeatures">
                                <econdition field-name="description" from="featureDesc"/>
                                <econdition field-name="productFeatureTypeId" from="productFeatureTypeId"/>
                            </entity-find>

                            <if condition="productFeatures">
                                <set field="productFeatureId" from="productFeatures[0].productFeatureId"/>

                                <!-- Delete ProductFeatureAppl -->
                                <service-call name="delete#org.apache.ofbiz.product.feature.ProductFeatureAppl"
                                              in-map="[productId:productId,
                                   productFeatureId:productFeatureId,
                                   productFeatureApplTypeId:'SELECTABLE_FEATURE',
                                   sequenceNum:sequenceNum]"/>
                            </if>
                        </iterate>
                    </if>

                    <if condition="diff.assocs.added">
                        <iterate list="diff.assocs.added" entry="vid">
                            <entity-find-one entity-name="co.hotwax.shopify.ShopifyShopProduct" value-field="shopifyShopProduct">
                                <field-map field-name="shopId" from="shopId"/>
                                <field-map field-name="productId" from="vid"/>
                            </entity-find-one>
                            <service-call name="create#org.apache.ofbiz.product.product.ProductAssoc"
                                          in-map="[productIdTo:shopifyShopProduct.productId, productId:productId, productAssocTypeId:'PRODUCT_VARIANT']"/>
                        </iterate>
                    </if>
                    <if condition="diff.assocs.removed">
                        <iterate list="diff.assocs.removed" entry="vid">
                            <entity-find-one entity-name="co.hotwax.shopify.ShopifyShopProduct" value-field="shopifyShopProduct">
                                <field-map field-name="shopId" from="shopId"/>
                                <field-map field-name="productId" from="vid"/>
                            </entity-find-one>
                            <service-call name="delete#org.apache.ofbiz.product.product.ProductAssoc"
                                          in-map="[productIdTo:shopifyShopProduct.productId, productId:productId, productAssocTypeId:'PRODUCT_VARIANT']"/>
                        </iterate>
                    </if>

                    <service-call name="store#co.hotwax.shopify.ShopifyShopProduct"
                                  in-map="[productId:productId, shopId:shopId, shopifyProductId:productUpdateHistory.productId]"/>
                    <service-call name="co.hotwax.oms.search.SearchServices.call#CreateProductIndex"
                                  in-map="[productId:productId, indexVariants:false]" ignore-error="true" transaction="force-new"/>
                    <else>
                        <set field="product" from="[:]"/>

                        <if condition="diff.title">
                            <set field="product.internalName" from="diff.title"/>
                        </if>
                        <if condition="diff.price">
                            <set field="product.price" value="diff.price"/>
                        </if>

                        <set field="product.productTypeId" value="FINISHED_GOOD"/>
                        <if condition="!diff.requiresShipping">
                            <set field="product.productTypeId" value="DIGITAL_GOOD"/>
                        </if>
                        <if condition="diff.requiresComponents">
                            <set field="product.productTypeId" value="MARKETING_PKG_PICK"/>
                        </if>
                        <if condition="diff.isGiftCard">
                            <set field="product.productTypeId" value="FINISHED_GOOD"/>
                        </if>
                        <set field="product.inventoryItemTypeId" value="NON_SERIAL_INV_ITEM"/>
                        <set field="product.isVariant" value="Y"/>

                        <if condition="diff.identifications">
                            <set field="product.productVariantSku" from="diff.identifications.sku"/>
                            <set field="product.barcode" from="diff.identifications.barcode"/>
                        </if>

                        <if condition="diff.price">
                            <entity-find entity-name="org.apache.ofbiz.product.price.ProductPrice" list="productPriceList">
                                <econdition field-name="productId" from="productId"/>
                                <econdition field-name="productPriceTypeId" value="LIST_PRICE"/>
                                <econdition field-name="productPricePurposeId" value="PURCHASE"/>
                                <econdition field-name="currencyUomId" from="productStore.defaultCurrencyUomId"/>
                                <econdition field-name="productStoreGroupId" from="productStore.productStoreGroupId"/>
                                <date-filter/>
                            </entity-find>

                            <!-- If productPriceList and price is updated then set the values from the list if not then set the values from the incoming productPrices -->
                            <if condition="productPriceList"><then>
                                <set field="product.prices" from="[productPriceTypeId:'LIST_PRICE', productPricePurposeId:'PURCHASE',
                        currencyUomId:productStore.defaultCurrencyUomId, price:diff.price, productStoreGroupId:productStore.productStoreGroupId,
                        fromDate:ec.l10n.format(productPriceList[0].fromDate, 'yyyy-MM-dd HH:mm:ss.SSS')]"/>
                            </then><else>
                                <set field="product.prices" from="[productPriceTypeId:'LIST_PRICE', productPricePurposeId:'PURCHASE',
                        currencyUomId:productStore.defaultCurrencyUomId, price:diff.price, productStoreGroupId:productStore.productStoreGroupId,
                        fromDate:ec.l10n.format(ec.user.nowTimestamp, 'yyyy-MM-dd-HH-mm-ss')]"/>
                            </else>
                            </if>
                        </if>

                        <if condition="productStore.productIdentifierEnumId == 'SHOPIFY_PRODUCT_SKU'">
                            <set field="productIdentifier" from="diff.identifications.sku"/>
                            <else-if condition="productStore.productIdentifierEnumId == 'SHOPIFY_BARCODE'">
                                <set field="productIdentifier" from="diff.identifications.barcode"/>
                            </else-if>
                            <else-if condition="productStore.productIdentifierEnumId == 'SHOPIFY_PRODUCT_ID'">
                                <set field="productIdentifier" from="productHistoryEntry.productId"/>
                            </else-if>
                        </if>

                        <!-- If productIdentifier present, fetch the product -->
                        <if condition="productIdentifier">
                            <set field="product.internalName" from="productIdentifier"/>
                        </if>

                        <if condition="diff.parentProductId">
                            <entity-find entity-name="org.apache.ofbiz.product.product.ProductAssoc" list="paCheck">
                                <econdition field-name="productId" from="diff.parentProductId"/>
                                <econdition field-name="productIdTo" from="productId"/>
                                <econdition field-name="productAssocTypeId" value="PRODUCT_VARIANT"/>
                            </entity-find>
                            <if condition="!paCheck">
                                <service-call name="create#org.apache.ofbiz.product.product.ProductAssoc"
                                              in-map="[productIdTo:productId, productId:diff.parentProductId, productAssocTypeId:'PRODUCT_VARIANT']"/>
                            </if>
                        </if>
                        <if condition="productId">
                            <set field="product.productId" from="productId"/>
                        </if>

                        <service-call name="store#org.apache.ofbiz.product.product.Product"
                                      in-map="product"/>

                        <if condition="diff.tags.added">
                            <iterate list="diff.tags.added" entry="kw">
                                <service-call name="create#org.apache.ofbiz.product.product.ProductKeyword"
                                              in-map="[productId:productId, keywordTypeId:'KWT_TAG', statusId:'KW_APPROVED', keyword:kw]"/>
                            </iterate>
                        </if>
                        <if condition="diff.tags.removed">
                            <iterate list="diff.tags.removed" entry="kw">
                                <service-call name="delete#org.apache.ofbiz.product.product.ProductKeyword"
                                              in-map="[productId:productId, keywordTypeId:'KWT_TAG', keyword:kw]"/>
                            </iterate>
                        </if>

                        <if condition="diffMap.features.added">
                            <iterate list="differenceMap.features.added" entry="featureString">
                                <script>
                                    def featureParts = featureString.split("/")
                                    def sequenceNum = featureParts[0] as Integer
                                    def productFeatureTypeDesc = featureParts[1].trim()
                                    def featureDesc = featureParts[2].trim()
                                </script>

                                <!-- Fetch productFeatureTypeId -->
                                <entity-find entity-name="org.apache.ofbiz.product.feature.ProductFeatureType" list="productFeatureTypes">
                                    <econdition field-name="description" from="productFeatureTypeDesc"/>
                                </entity-find>

                                <if condition="productFeatureTypes">
                                    <set field="productFeatureTypeId" from="productFeatureTypes[0].productFeatureTypeId"/>
                                    <else>
                                        <service-call name="create#org.apache.ofbiz.product.feature.ProductFeatureType"
                                                      in-map="[description:productFeatureTypeDesc]"
                                                      out-map="createdFeatureType" transaction="force-new"/>
                                        <set field="productFeatureTypeId" from="createdFeatureType.productFeatureTypeId"/>
                                    </else>
                                </if>

                                <!-- Fetch productFeatureId -->
                                <entity-find entity-name="org.apache.ofbiz.product.feature.ProductFeature" list="productFeatures">
                                    <econdition field-name="description" from="featureDesc"/>
                                    <econdition field-name="productFeatureTypeId" from="productFeatureTypeId"/>
                                </entity-find>

                                <if condition="productFeatures">
                                    <set field="productFeatureId" from="productFeatures[0].productFeatureId"/>
                                    <else>
                                        <service-call name="create#org.apache.ofbiz.product.feature.ProductFeature"
                                                      in-map="[productFeatureTypeId:productFeatureTypeId, description:featureDesc]"
                                                      out-map="createdFeature" transaction="force-new"/>
                                        <set field="productFeatureId" from="createdFeature.productFeatureId"/>
                                    </else>
                                </if>

                                <!-- Create ProductFeatureAppl -->
                                <service-call name="create#org.apache.ofbiz.product.feature.ProductFeatureAppl"
                                              in-map="[productId:productId,
                               productFeatureId:productFeatureId,
                               productFeatureApplTypeId:'SELECTABLE_FEATURE',
                               sequenceNum:sequenceNum]"/>
                            </iterate>
                        </if>
                        <if condition="diff.features.removed">
                            <iterate list="differenceMap.features.removed" entry="featureString">
                                <script>
                                    def featureParts = featureString.split("/")
                                    def sequenceNum = featureParts[0] as Integer
                                    def productFeatureTypeDesc = featureParts[1].trim()
                                    def featureDesc = featureParts[2].trim()
                                </script>

                                <!-- Fetch productFeatureTypeId -->
                                <entity-find entity-name="org.apache.ofbiz.product.feature.ProductFeatureType" list="productFeatureTypes">
                                    <econdition field-name="description" from="productFeatureTypeDesc"/>
                                </entity-find>

                                <if condition="productFeatureTypes">
                                    <set field="productFeatureTypeId" from="productFeatureTypes[0].productFeatureTypeId"/>
                                </if>

                                <!-- Fetch productFeatureId -->
                                <entity-find entity-name="org.apache.ofbiz.product.feature.ProductFeature" list="productFeatures">
                                    <econdition field-name="description" from="featureDesc"/>
                                    <econdition field-name="productFeatureTypeId" from="productFeatureTypeId"/>
                                </entity-find>

                                <if condition="productFeatures">
                                    <set field="productFeatureId" from="productFeatures[0].productFeatureId"/>

                                    <!-- Delete ProductFeatureAppl -->
                                    <service-call name="delete#org.apache.ofbiz.product.feature.ProductFeatureAppl"
                                                  in-map="[productId:resolvedProductId,
                                   productFeatureId:productFeatureId,
                                   productFeatureApplTypeId:'SELECTABLE_FEATURE',
                                   sequenceNum:sequenceNum]"/>
                                </if>
                            </iterate>
                        </if>

                        <if condition="diff.identifications">
                            <if condition="diff.identifications.sku">
                                <service-call name="create#co.hotwax.product.GoodIdentification"
                                              in-map="[productId:productId, goodIdentificationTypeId:'SKU', idValue:diff.identifications.sku]"/>
                            </if>
                            <if condition="diff.identifications.barcode">
                                <service-call name="create#co.hotwax.product.GoodIdentification"
                                              in-map="[productId:productId, goodIdentificationTypeId:'UPCA', idValue:diff.identifications.barcode]"/>
                            </if>
                        </if>

                        <service-call name="store#co.hotwax.shopify.ShopifyShopProduct"
                                      in-map="[productId:productId, shopId:ec.context.shopId, shopifyProductId:productUpdateHistory.productId, shopifyInventoryItemId:diff.identifications.id]"/>
                        <service-call name="co.hotwax.oms.search.SearchServices.call#CreateProductIndex"
                                      in-map="[productId:productId, indexVariants:false]" ignore-error="true" transaction="force-new"/>
                    </else>
                </if>
            </iterate>
        </actions>
    </service>
</services>
