<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:noNamespaceSchemaLocation="https://moqui.org/xsd/service-definition-3.xsd">

    <service verb="convert" noun="BopisToShipToStore" transaction="force-new">
        <description>
            Convert BOPIS order to Ship-to-Store when item is unavailable at pickup location.
            Processes ALL items in the specified ship group.
        </description>

        <in-parameters>
            <parameter name="orderId" type="String" required="true"/>
            <parameter name="shipGroupSeqId" type="String" required="true"/>
        </in-parameters>

        <out-parameters>
            <parameter name="success" type="Boolean"/>
            <parameter name="message" type="String"/>
            <parameter name="pickupFacilityId" type="String"/>
            <parameter name="itemsProcessed" type="Integer"/>
        </out-parameters>

        <actions>

            <!-- STEP 1: GET ORDER DETAILS -->
            <service-call name="co.hotwax.orderledger.order.OrderServices.get#SalesOrder" in-map="[orderId:orderId]" out-map="orderResult"/>

            <if condition="!orderResult.orderDetail">
                <log level="error" message="[Step 1 FAILED] Order ${orderId} not found"/>
                <return error="true" message="Order ${orderId} not found"/>
            </if>

            <set field="shipGroups" from="orderResult.orderDetail?.shipGroups ?: []"/>
            <set field="targetShipGroup" from="shipGroups.find{ it.shipGroupSeqId == shipGroupSeqId }"/>

            <if condition="!targetShipGroup || !targetShipGroup.facilityId">
                <log level="error" message="[Step 1 FAILED] Ship group ${shipGroupSeqId} not found"/>
                <return error="true" message="Ship group ${shipGroupSeqId} not found"/>
            </if>

            <set field="pickupFacilityId" from="targetShipGroup.facilityId"/>
            <set field="shipmentMethodTypeId" from="targetShipGroup.shipmentMethodTypeId"/>

            <!-- STEP 2: VALIDATE STOREPICKUP -->
            <set field="isCurrentlyBopis" from="co.hotwax.oms.util.OmsUtil.hasParentType(
            ec.ecfi, 'org.apache.ofbiz.shipment.shipment.ShipmentMethodType',
            'shipmentMethodTypeId', shipmentMethodTypeId,
            'parentTypeId', 'STOREPICKUP')" type="Boolean"/>

            <if condition="!isCurrentlyBopis">
                <log level="error" message="[Step 2 FAILED] Not a BOPIS order"/>
                <return error="true" message="Order ${orderId} is not a BOPIS order"/>
            </if>
            <!-- STEP 3: CHECK FOR EXISTING SHIPMENTS -->
            <entity-find entity-name="org.apache.ofbiz.shipment.shipment.Shipment" list="existingShipments">
                <econdition field-name="primaryOrderId" from="orderId"/>
                <econdition field-name="primaryShipGroupSeqId" from="shipGroupSeqId"/>
                <econdition field-name="statusId" operator="in" value="SHIPMENT_APPROVED,SHIPMENT_PACKED,SHIPMENT_SHIPPED"/>
            </entity-find>

            <if condition="existingShipments">
                <log level="warn" message="[Step 3 SKIP] Shipment already exists"/>
                <set field="success" value="true"/>
                <set field="message" value="Shipment already exists for this order"/>
                <return/>
            </if>

            <!-- STEP 4: GET OrderItemShipGroup -->
            <entity-find-one entity-name="org.apache.ofbiz.order.order.OrderItemShipGroup" value-field="shipGroup">
                <field-map field-name="orderId" from="orderId"/>
                <field-map field-name="shipGroupSeqId" from="shipGroupSeqId"/>
            </entity-find-one>

            <if condition="!shipGroup">
                <log level="error" message="[Step 4 FAILED] OrderItemShipGroup not found"/>
                <return error="true" message="OrderItemShipGroup not found"/>
            </if>
            <!-- STEP 4B: GET ALL ORDER ITEMS IN SHIP GROUP -->
            <entity-find entity-name="org.apache.ofbiz.order.order.OrderItem" list="orderItems">
                <econdition field-name="orderId" from="orderId"/>
                <econdition field-name="shipGroupSeqId" from="shipGroupSeqId"/>
                <econdition field-name="statusId" operator="not-equals" value="ITEM_CANCELLED"/>
            </entity-find>

            <if condition="!orderItems">
                <log level="error" message="[Step 4B FAILED] No order items found in ship group"/>
                <return error="true" message="No order items found in ship group ${shipGroupSeqId}"/>
            </if>
            <!-- STEP 5: CANCEL ALL INVENTORY RESERVATIONS -->
            <set field="cancelledCount" from="0" type="Integer"/>

            <iterate list="orderItems" entry="orderItem">
                <service-call name="co.hotwax.oms.impl.OrderReservationServices.cancel#OrderItemInventoryReservation"
                              in-map="[orderId:orderId, orderItemSeqId:orderItem.orderItemSeqId]"
                              out-map="cancelResult"
                              ignore-error="true"/>

                <if condition="cancelResult?.cancelledReservations">
                    <set field="cancelledCount" from="cancelledCount + cancelResult.cancelledReservations.size()"/>
                </if>
            </iterate>
            <!-- STEP 6: UPDATE OrderItemShipGroup -->
            <set field="shipGroup.shipmentMethodTypeId" value="SHIP_TO_STORE"/>
            <set field="shipGroup.facilityId" value="_NA_"/>
            <set field="shipGroup.orderFacilityId" from="pickupFacilityId"/>
            <set field="shipGroup.carrierPartyId" value="_NA_"/>
            <entity-update value-field="shipGroup"/>
            <!-- STEP 6.5: RECORD FACILITY CHANGE-->
            <iterate list="orderItems" entry="orderItem">
                <service-call name="create#co.hotwax.facility.OrderFacilityChange"
                              in-map="[orderId: orderId,
                                       orderItemSeqId: orderItem.orderItemSeqId,
                                       shipGroupSeqId: shipGroupSeqId,
                                       fromFacilityId: pickupFacilityId,
                                       facilityId: '_NA_',
                                       changeUserLogin: ec.user.username,
                                       routerUserLogin: ec.user.username,
                                       changeDatetime: ec.user.nowTimestamp,
                                       changeReasonEnumId: 'REJECT',
                                       comments: 'BOPIS to Ship-to-Store conversion: Order moved from ' + pickupFacilityId + ' to brokering queue']"
                              ignore-error="true"/>
            </iterate>
            <!-- STEP 7: UPDATE OrderHeader -->

            <entity-find-one entity-name="org.apache.ofbiz.order.order.OrderHeader" value-field="orderHeader">
                <field-map field-name="orderId" from="orderId"/>
            </entity-find-one>

            <if condition="orderHeader">
                <set field="orderHeader.originFacilityId" value="_NA_"/>
                <entity-update value-field="orderHeader"/>
                <else>
                    <log level="warn" message="[Step 7 SKIP] OrderHeader not found"/>
                </else>
            </if>


            <!-- STEP 8: UPDATE ALL ORDER ITEMS -->
            <iterate list="orderItems" entry="orderItem">
                <set field="orderItem.statusId" value="ITEM_APPROVED"/>
                <set field="orderItem.shipGroupSeqId" from="shipGroupSeqId"/>
                <set field="orderItem.requestedShipMethTypeId" value="SHIP_TO_STORE"/>
                <entity-update value-field="orderItem"/>
            </iterate>

            <!-- STEP 9: ADD TRACKING ATTRIBUTES -->
            <service-call name="create#org.apache.ofbiz.order.order.OrderAttribute" in-map="[orderId:orderId, attrName:'CONVERTED_TO_SHIP_TO_STORE', attrValue:'Y']" ignore-error="true"/>

            <service-call name="create#org.apache.ofbiz.order.order.OrderAttribute" in-map="[orderId:orderId, attrName:'ORIGINAL_PICKUP_FACILITY', attrValue:pickupFacilityId]" ignore-error="true"/>

            <service-call name="create#org.apache.ofbiz.order.order.OrderAttribute" in-map="[orderId:orderId, attrName:'SHIP_TO_STORE_DESTINATION', attrValue:pickupFacilityId]" ignore-error="true"/>

            <!-- SUCCESS RESPONSE -->
            <set field="success" value="true" type="Boolean"/>
            <set field="message" value="BOPIS order converted to Ship-to-Store. ${orderItems.size()} items processed. Awaiting brokering assignment."/>
            <set field="itemsProcessed" from="orderItems.size()"/>
        </actions>
    </service>
    <service verb="receive" noun="ShipToStoreShipment">
        <description>
            Receive Ship-to-Store shipment at destination facility.
            Called when store staff clicks "Arrived" button.
        </description>

        <in-parameters>
            <parameter name="shipmentId" required="true"/>
        </in-parameters>

        <out-parameters>
            <parameter name="success" type="Boolean" default-value="false"/>
            <parameter name="receivedItems" type="List"/>
        </out-parameters>

        <actions>
            <!-- STEP 2: FETCH SHIPMENT -->
            <entity-find-one entity-name="org.apache.ofbiz.shipment.shipment.Shipment" value-field="shipment">
                <field-map field-name="shipmentId"/>
            </entity-find-one>

            <if condition="!shipment">
                <log level="error" message="[Ship-to-Store] ERROR: Shipment ${shipmentId} not found in database"/>
                <return error="true" message="Shipment ${shipmentId} not found"/>
            </if>
            <!-- STEP 3: GET DESTINATION FACILITY -->
                <entity-find-one entity-name="org.apache.ofbiz.product.facility.FacilityContactMechPurpose" value-field="facilityContact">
                    <field-map field-name="contactMechId" from="shipment.destinationContactMechId"/>
                    <field-map field-name="contactMechPurposeTypeId" value="PRIMARY_LOCATION"/>
                </entity-find-one>

            <if condition="!facilityContact">
                <log level="error" message="[Ship-to-Store] ERROR: No facility found for contactMechId: ${shipment.destinationContactMechId}"/>
                <return error="true" message="Cannot determine destination facility for shipment ${shipmentId}"/>
            </if>
            <set field="orderId" from="shipment.primaryOrderId"/>
            <!-- STEP 4: VERIFY SHIP-TO-STORE ORDER -->
            <entity-find-one entity-name="org.apache.ofbiz.order.order.OrderItemShipGroup" value-field="orderShipGroup">
                <field-map field-name="orderId"/>
                <field-map field-name="shipGroupSeqId" from="shipment.primaryShipGroupSeqId"/>
            </entity-find-one>
            <if condition="orderShipGroup?.shipmentMethodTypeId != 'SHIP_TO_STORE'">
                <log level="error" message="[Ship-to-Store] ERROR: Not a Ship-to-Store order. Method: ${orderShipGroup?.shipmentMethodTypeId}"/>
                <return error="true" message="Shipment ${shipmentId} is not a Ship-to-Store order"/>
            </if>
            <set field="destinationFacilityId" from="orderShipGroup.orderFacilityId"/>
            <!-- STEP 5: GET SHIPMENT ITEMS -->
            <entity-find entity-name="org.apache.ofbiz.shipment.shipment.ShipmentItem" list="shipmentItems">
                <econdition field-name="shipmentId"/>
            </entity-find>

            <set field="receivedItems" from="[]"/>
            <set field="itemCounter" from="0" type="Integer"/>

            <!-- STEP 6: ITERATE AND RECEIVE EACH ITEM -->
            <iterate list="shipmentItems" entry="shipmentItem">
                <set field="itemCounter" from="itemCounter + 1"/>

                <!-- Get ItemIssuance to find orderItemSeqId -->
                <entity-find entity-name="org.apache.ofbiz.shipment.issuance.ItemIssuance" list="itemIssuances" limit="1">
                    <econdition field-name="shipmentId" from="shipmentId"/>
                    <econdition field-name="shipmentItemSeqId" from="shipmentItem.shipmentItemSeqId"/>
                </entity-find>

                <if condition="!itemIssuances">
                    <log level="error" message="[Ship-to-Store] ERROR: No ItemIssuance found!"/>
                    <log level="error" message="[Ship-to-Store]   - ShipmentId: ${shipmentId}"/>
                    <log level="error" message="[Ship-to-Store]   - ShipmentItemSeqId: ${shipmentItem.shipmentItemSeqId}"/>
                    <return error="true" message="Cannot find order item for shipment item ${shipmentItem.shipmentItemSeqId}"/>
                </if>

                <set field="itemIssuance" from="itemIssuances[0]"/>
                <set field="orderItemSeqId" from="itemIssuance.orderItemSeqId"/>

                <!-- Call receive service -->
                <service-call name="co.hotwax.poorti.FulfillmentServices.receive#ProductInventory"
                              in-map="[facilityId: destinationFacilityId,
                                   productId: shipmentItem.productId,
                                   orderId: orderId,
                                   orderItemSeqId: orderItemSeqId,
                                   shipmentId: shipmentId,
                                   shipmentItemSeqId: shipmentItem.shipmentItemSeqId,
                                   quantityAccepted: shipmentItem.quantity,
                                   quantityRejected: 0]"
                              out-map="receiveResult"/>
                <script>receivedItems.add([
                    productId: shipmentItem.productId,
                    quantity: shipmentItem.quantity,
                    orderItemSeqId: orderItemSeqId,
                    shipmentItemSeqId: shipmentItem.shipmentItemSeqId,
                    receiptId: receiveResult.receiptId,
                    inventoryItemId: receiveResult.inventoryItemId
                    ])</script>
            </iterate>

            <!-- STEP 7: SERVICE COMPLETION -->
            <set field="success" from="true"/>
        </actions>
    </service>
    <service verb="handover" noun="ShipToStoreOrder">
        <description>
            Handover Ship-to-Store order to customer at pickup.
            1. Creates ItemIssuance for each shipment item
            2. Reduces inventory (QOH and ATP) at destination store
            3. Updates shipment status to DELIVERED
            4. Completes order
        </description>

        <in-parameters>
            <parameter name="shipmentId" required="true"/>
        </in-parameters>

        <out-parameters>
            <parameter name="success" type="Boolean" default-value="false"/>
            <parameter name="orderId"/>
            <parameter name="itemsProcessed" type="Integer" default-value="0"/>
        </out-parameters>

        <actions>
            <!-- STEP 1: GET AND VALIDATE SHIPMENT -->
            <entity-find-one entity-name="org.apache.ofbiz.shipment.shipment.Shipment" value-field="shipment">
                <field-map field-name="shipmentId"/>
            </entity-find-one>

            <if condition="!shipment">
                <log level="error" message="[Handover] ERROR: Shipment ${shipmentId} not found"/>
                <return error="true" message="Shipment ${shipmentId} not found"/>
            </if>

            <set field="orderId" from="shipment.primaryOrderId"/>
            <!-- Verify Ship-to-Store -->
            <if condition="shipment.shipmentMethodTypeId != 'SHIP_TO_STORE'">
                <log level="error" message="[Handover] ERROR: Not a Ship-to-Store shipment"/>
                <return error="true" message="Shipment ${shipmentId} is not Ship-to-Store"/>
            </if>

            <!-- Get OrderItemShipGroup for destination facility -->
            <entity-find-one entity-name="org.apache.ofbiz.order.order.OrderItemShipGroup"
                             value-field="orderShipGroup">
                <field-map field-name="orderId" from="orderId"/>
                <field-map field-name="shipGroupSeqId" from="shipment.primaryShipGroupSeqId"/>
            </entity-find-one>

            <set field="destinationFacilityId" from="orderShipGroup.orderFacilityId"/>

            <!-- STEP 2: GET ALL SHIPMENT ITEMS -->
            <entity-find entity-name="co.hotwax.shipment.ShipmentItemView" list="shipmentItems">
                <econdition field-name="shipmentId"/>
            </entity-find>

            <if condition="!shipmentItems">
                <log level="error" message="[Handover] ERROR: No items found for shipment"/>
                <return error="true" message="No items found for shipment ${shipmentId}"/>
            </if>
            <!-- STEP 3: REDUCE INVENTORY FOR EACH ITEM -->
            <set field="processedCount" from="0" type="Integer"/>

            <iterate list="shipmentItems" entry="shipmentItem">
                <!-- Get InventoryItem at destination facility -->
                <service-call name="co.hotwax.oms.product.ProductServices.findOrCreate#FacilityInventoryItem"
                              in-map="[productId: shipmentItem.productId,
                                       facilityId: destinationFacilityId]"
                              out-map="findOrCreateResult"/>

                <set field="inventoryItemId" from="findOrCreateResult.inventoryItemId"/>
                <!-- STEP 3A: CREATE ITEM ISSUANCE -->
                <service-call name="create#org.apache.ofbiz.shipment.issuance.ItemIssuance"
                              in-map="[orderId: shipmentItem.orderId,
                                       orderItemSeqId: shipmentItem.orderItemSeqId,
                                       shipGroupSeqId: shipmentItem.shipGroupSeqId,
                                       shipmentId: shipmentId,
                                       shipmentItemSeqId: shipmentItem.shipmentItemSeqId,
                                       inventoryItemId: inventoryItemId,
                                       issuedDateTime: ec.user.nowTimestamp,
                                       quantity: shipmentItem.quantity]"
                              out-map="itemIssuanceOut"/>


                <!-- STEP 3B: CREATE NEGATIVE INVENTORY ITEM DETAIL -->
                <service-call name="co.hotwax.oms.product.InventoryServices.create#InventoryItemDetail"
                              in-map="[inventoryItemId: inventoryItemId,
                                       effectiveDate: ec.user.nowTimestamp,
                                       orderId: shipmentItem.orderId,
                                       orderItemSeqId: shipmentItem.orderItemSeqId,
                                       shipGroupSeqId: shipmentItem.shipGroupSeqId,
                                       shipmentId: shipmentId,
                                       shipmentItemSeqId: shipmentItem.shipmentItemSeqId,
                                       itemIssuanceId: itemIssuanceOut.itemIssuanceId,
                                       quantityOnHandDiff: new BigDecimal(-shipmentItem.quantity),
                                       availableToPromiseDiff: new BigDecimal(-shipmentItem.quantity),
                                       reasonEnumId: 'VAR_LOST']"
                              out-map="inventoryDetailOut"/>
                <set field="processedCount" from="processedCount + 1"/>
            </iterate>
            <!-- STEP 4: UPDATE SHIPMENT STATUS TO DELIVERED -->
            <service-call name="update#org.apache.ofbiz.shipment.shipment.Shipment"
                          in-map="[shipmentId: shipmentId,
                                   statusId: 'SHIPMENT_DELIVERED']"/>
            <!-- STEP 5: COMPLETE ORDER -->
            <service-call name="co.hotwax.orderledger.order.ShipToStoreServices.complete#ShipToStoreOrder"
                          in-map="[shipmentId: shipmentId]"/>
            <!-- STEP 6: SUCCESS -->
            <set field="success" from="true"/>
            <set field="itemsProcessed" from="processedCount"/>
        </actions>
    </service>
    <service verb="complete" noun="ShipToStoreOrder">
        <description>Complete a Ship-to-Store order after customer pickup</description>
        <in-parameters>
            <parameter name="shipmentId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="orderId"/>
        </out-parameters>
        <actions>
            <!-- Get shipment -->
            <entity-find-one entity-name="org.apache.ofbiz.shipment.shipment.Shipment"
                             value-field="shipment">
                <field-map field-name="shipmentId"/>
            </entity-find-one>

            <if condition="!shipment">
                <return error="true" message="Shipment ${shipmentId} not found"/>
            </if>

            <set field="orderId" from="shipment.primaryOrderId"/>

            <!-- Verify this is a Ship-to-Store order -->
            <entity-find-one entity-name="org.apache.ofbiz.order.order.OrderItemShipGroup"
                             value-field="orderShipGroup">
                <field-map field-name="orderId"/>
                <field-map field-name="shipGroupSeqId" from="shipment.primaryShipGroupSeqId"/>
            </entity-find-one>

            <if condition="orderShipGroup?.shipmentMethodTypeId != 'SHIP_TO_STORE'">
                <return error="true" message="Order ${orderId} is not a Ship-to-Store order"/>
            </if>
            <!-- Complete order (this does EVERYTHING: items, reservations, indexing) -->
            <service-call name="co.hotwax.oms.order.OrderServices.complete#SalesOrderItemByShipment"
                          in-map="[shipmentId:shipmentId]"/>

            <log level="info" message="[Ship-to-Store] Order ${orderId} completed successfully"/>
        </actions>
    </service>

</services>
