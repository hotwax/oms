<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">

    <!-- NOTE This service is being used to fetch Eligible Fulfill Transfer Orders in the Fulfillment and Receiving App -->
    <service verb="get" noun="TransferOrders">
        <description>
            Service to get all Transfer Orders.
            By default, the service will return orders with status ORDER_APPROVED.
            This supports filtering on the basis of parameters orderId, orderStatusId, itemStatusId,
            originFacilityId, destinationFacilityId and orderName.
        </description>
        <in-parameters>
            <parameter name="orderId">
                <description>The ID of the Transfer Order in OMS.</description>
            </parameter>
            <parameter name="orderStatusId" default-value="ORDER_APPROVED">
                <description>The ID of the status of the Transfer Order in OMS.</description>
            </parameter>
            <parameter name="itemStatusId">
                <description>The ID of the status of the Transfer Order Item in OMS.</description>
            </parameter>
            <parameter name="originFacilityId">
                <description>The ID of the source facility of the Transfer Order in OMS.</description>
            </parameter>
            <parameter name="destinationFacilityId">
                <description>The ID of the destination facility of the Transfer Order in OMS.</description>
            </parameter>
            <parameter name="excludeOriginFacilityIds" type="List">
                <description>
                    The list of source Facility IDs in OMS to exclude for the Transfer Orders.
                    Eg. To exclude the Rejected TOs in the Receiving App, send the parameter with value as REJECTED_ITM_PARKING.</description>
            </parameter>
            <parameter name="orderName">
                <description>The order name of Transfer Order.</description>
            </parameter>
            <parameter name="pageIndex" type="Integer" default="0">
                <description>Page number to return, starting with zero.</description>
            </parameter>
            <parameter name="limit" type="Integer" default="20">
                <description>Number of records per page (default 20).</description>
            </parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="orders" type="List"/>
            <parameter name="ordersCount" type="Integer"/>
        </out-parameters>
        <actions>
            <!-- NOTE Since this is a simple fetch from view entity, we could have directly used the entity in REST end-point
                    with method type="get", but due to the limitation of using distinct, created this service for now.
                    Also the ordersCount is directly prepared from the entity-find operation and can be used to return the
                    distinct orders here.
                    TODO check the possible application of distinct when get on entity in rest.xml file  -->
            <!-- Entity Find on OrderHeaderItemShipGroup view entity -->
            <entity-find entity-name="co.hotwax.oms.order.OrderHeaderItemShipGroup" limit="limit" offset="pageIndex" list="orders" distinct="true">
                <search-form-inputs default-order-by="orderDate"/>
                <econdition field-name="orderTypeId" value="TRANSFER_ORDER"/>
                <econdition field-name="orderId" ignore-if-empty="true"/>
                <econdition field-name="orderStatusId"/>
                <econdition field-name="itemStatusId" ignore-if-empty="true"/>
                <econdition field-name="facilityId" from="excludeOriginFacilityIds" ignore-if-empty="true" operator="not-in"/>
                <econdition field-name="facilityId" from="originFacilityId" ignore-if-empty="true"/>
                <econdition field-name="orderFacilityId" from="destinationFacilityId" ignore-if-empty="true"/>
                <econdition field-name="orderName" operator="like" value="%${orderName}%" ignore="!orderName"/>
                <select-field field-name="orderId,orderName,orderExternalId,orderStatusId,orderStatusDesc"/>
            </entity-find>
        </actions>
    </service>

    <service verb="get" noun="TransferOrder">
        <description>
            Service to get Transfer Order Details.
        </description>
        <in-parameters>
            <parameter name="orderId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="order" type="Map">
                <parameter name="orderId"/>
                <parameter name="status"/>
                <parameter name="orderName"/>
                <parameter name="externalId"/>
                <parameter name="statusId"/>
                <parameter name="maySplit"/>
                <parameter name="currencyUom"/>
                <parameter name="facilityId"/>
                <parameter name="orderFacilityId"/>
                <parameter name="carrierPartyId"/>
                <parameter name="shipmentMethodTypeId"/>
                <parameter name="grandTotal"/>
                <parameter name="items" type="List">
                    <parameter name="orderItemMap" type="Map">
                        <parameter name="orderItemSeqId"/>
                        <parameter name="shipGroupSeqId"/>
                        <parameter name="quantity"/>
                        <parameter name="statusId"/>
                        <parameter name="status"/>
                        <parameter name="itemDescription"/>
                        <parameter name="cancelQuantity"/>
                        <parameter name="productId"/>
                        <parameter name="maySplit"/>
                        <parameter name="totalIssuedQuantity"/>
                        <parameter name="totalReceivedQuantity"/>
                        <parameter name="unitPrice"/>
                    </parameter>
                </parameter>
                <parameter name="shipGroups" type="List">
                    <parameter name="shipGroup" type="Map">
                        <auto-parameters entity-name="org.apache.ofbiz.order.order.OrderItemShipGroup"/>
                    </parameter>
                </parameter>
            </parameter>
        </out-parameters>
        <actions>
            <set field="order" from="[:]"/>

            <entity-find-one entity-name="org.apache.ofbiz.order.order.OrderHeader" value-field="orderHeader">
                <select-field field-name="orderId,orderName,externalId,statusId,currencyUom,productStoreId,statusFlowId,grandTotal"/>
            </entity-find-one>

            <entity-find-related-one value-field="orderHeader" relationship-name="moqui.basic.StatusItem" to-value-field="statusItem" cache="true"/>

            <set field="order" from="orderHeader.getPlainValueMap(0)"/>
            <set field="order.status" from="statusItem?.description"/>

            <!-- Get Order Item details -->
            <entity-find entity-name="co.hotwax.order.OrderItemAndShipGroup" list="orderItemList">
                <econdition field-name="orderId" from="orderId"/>
                <select-field field-name="orderItemSeqId,shipGroupSeqId,productId,quantity,statusId,itemDescription,cancelQuantity,maySplit,facilityId,orderFacilityId,carrierPartyId,shipmentMethodTypeId,unitPrice"/>
            </entity-find>

            <!-- NOTE: Added the maySplit, orderFacilityId, facilityId, shipmentMethodTypeId and carrierPartyId of the first order item of the order.-->
            <set field="orderItemFirst" from="orderItemList?.first"/>

            <set field="order" from="order + [maySplit:orderItemFirst?.maySplit,facilityId:orderItemFirst?.facilityId,
                    orderFacilityId:orderItemFirst?.orderFacilityId, carrierPartyId:orderItemFirst?.carrierPartyId,
                    shipmentMethodTypeId:orderItemFirst?.shipmentMethodTypeId]"/>

            <!-- Get Order Item Ship Group details -->
            <entity-find entity-name="org.apache.ofbiz.order.order.OrderItemShipGroup" list="shipGroups">
                <econdition field-name="orderId"/>
            </entity-find>

            <!-- Add the ship groups list to the order map -->
            <set field="order" from="order + [shipGroups:shipGroups]"/>

            <set field="order.items" from="[]"/>
            <iterate list="orderItemList" entry="orderItem">
                <entity-find-one entity-name="moqui.basic.StatusItem" value-field="statusItem" cache="true">
                    <field-map field-name="statusId" from="orderItem.statusId"/>
                </entity-find-one>

                <set field="orderItem" from="orderItem.getPlainValueMap(0)"/>

                <!-- Get total Issued quantity for the item -->
                <entity-find entity-name="co.hotwax.shipment.ItemIssuanceSummary" list="itemIssuanceList">
                    <econdition field-name="orderId"/>
                    <econdition field-name="orderItemSeqId" from="orderItem.orderItemSeqId"/>
                    <select-field field-name="orderId,orderItemSeqId,quantity"/>
                </entity-find>

                 <!-- Get total Received Quantity for the item -->
                <entity-find entity-name="co.hotwax.shipment.ShipmentReceiptSummary" list="shipmentReceiptList">
                    <econdition field-name="orderId"/>
                    <econdition field-name="orderItemSeqId" from="orderItem.orderItemSeqId"/>
                    <select-field field-name="orderId,orderItemSeqId,quantityAccepted"/>
                </entity-find>

                <script>order.items.add(orderItem + [status:statusItem?.description, totalIssuedQuantity:itemIssuanceList?.first?.quantity, totalReceivedQuantity:shipmentReceiptList?.first?.quantityAccepted])</script>
            </iterate>
        </actions>
    </service>

    <service verb="create" noun="TransferOrder">
        <description>Create a Transfer Order</description>
        <in-parameters>
            <parameter name="payload" type="Map" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="orderId">
                <description>The ID of the Transfer Order created in OMS.</description>
            </parameter>
        </out-parameters>
        <actions>
            <!--If externalId is provided, check if Order with the externalId already exists -->
            <if condition="payload.externalId">
                <entity-find-count entity-name="org.apache.ofbiz.order.order.OrderHeader" count-field="orderCount">
                    <econdition field-name="externalId" from="payload.externalId"/>
                </entity-find-count>

                <!-- Validate if Order with externalId already exists -->
                <if condition="orderCount &gt; 0">
                    <message error="true">Order [External ID: ${payload.externalId}] - Duplicate detected, order already exists</message>
                </if>
            </if>

            <!-- Validate if facility and orderFacility exits in shipGroups -->
            <if condition="!payload.shipGroups[0].facilityId || !payload.shipGroups[0].orderFacilityId">
                <message error="true">Order [External ID: ${payload.externalId}] - Missing facilityId or orderFacilityId in shipGroup</message>
            </if>

            <!-- Validate if productId exits in shipGroups.items -->
            <iterate list="payload.shipGroups[0].items" entry="item">
                <if condition="!item.productId">
                    <message error="true">Order [External ID: ${payload.externalId}] - Missing productId in shipGroups.items</message>
                </if>
            </iterate>
            <check-errors/>
            <!--Calling the OOTB transfer order service -->
            <service-call name="create#org.apache.ofbiz.order.order.OrderHeader" in-map="payload" out-map="orderOut"/>
            <set field="orderId" from="orderOut.orderId"/>
        </actions>
    </service>

    <service verb="bulkApprove" noun="StoreFulfillTransferOrders" transaction-timeout="3600" authenticate="anonymous-all">
        <description>
            Service to bulk approve transfer orders where fulfillment is done by OMS i.e. Store to Store and Store to Warehouse Transfer Orders.
            The Order will be updated to ORDER_APPROVED status. The Items will be updated to the next eligible Item
            Status based on the statusFlowId associated with the Transfer Order i.e. ITEM_PENDING_FULFILL.
        </description>
        <in-parameters>
            <parameter name="orderIds" type="List">
                <description>List of order Ids to be approved.</description>
            </parameter>
            <parameter name="bufferTime" type="Integer" default-value="1">
                <description>
                    Time to consider as buffer time from order entry date time (in minutes).
                </description>
            </parameter>
        </in-parameters>
        <actions>
            <!-- Get Pending Approval Orders where status flow ID = TO_Fulfill_Only,TO_Fulfill_And_Receive -->
            <service-call name="co.hotwax.orderledger.order.TransferOrderServices.get#PendingApproveTransferOrders"
                    in-map="[statusFlowIds:'TO_Fulfill_Only,TO_Fulfill_And_Receive', bufferTime:bufferTime, orderIds:orderIds]"
                    out-map="ordersOut"/>

            <!-- Approve Orders -->
            <iterate list="ordersOut?.orders" entry="order">
                <service-call name="co.hotwax.orderledger.order.TransferOrderServices.approve#StoreFulfillTransferOrder"
                        in-map="[orderId:order.orderId]" transaction="force-new" ignore-error="true"/>
            </iterate>
        </actions>
    </service>

    <service verb="get" noun="PendingApproveTransferOrders">
        <in-parameters>
            <parameter name="orderIds" type="List">
                <description>List of order Ids to be approved.</description>
            </parameter>
            <parameter name="statusFlowIds" type="List">
                <description>
                    The ID of the Status Flow in OMS for Transfer Orders.
                    Eg. TO_Fulfill_Only, TO_Fulfill_And_Receive, TO_Receive_Only.
                </description>
            </parameter>
            <parameter name="bufferTime" type="Integer" default-value="1">
                <description>Time to consider as buffer time from order entry date time (in minutes).</description>
            </parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="orders" type="List">
                <description>The list of Transfer Orders pending for approval.</description>
            </parameter>
        </out-parameters>
        <actions>
            <!-- Subtract bufferTime minutes from nowTimestamp using Calendar -->
            <script>
                Calendar delayCal = ec.user.getNowCalendar()
                delayCal.add(Calendar.MINUTE, (int) -bufferTime)
                delayTimestamp = new Timestamp(delayCal.getTimeInMillis())
            </script>
            <!-- Fetch the list of Transfer Orders in Created Status -->
            <entity-find entity-name="org.apache.ofbiz.order.order.OrderHeader" list="orders">
                <econdition field-name="orderTypeId" value="TRANSFER_ORDER"/>
                <econdition field-name="statusId" value="ORDER_CREATED"/>
                <econdition field-name="orderId" from="orderIds" operator="in" ignore-if-empty="true"/>
                <econdition field-name="entryDate" from="delayTimestamp" operator="less-equals"/>
                <econdition field-name="statusFlowId" operator="in" from="statusFlowIds"/>
                <select-field field-name="orderId"/>
            </entity-find>
        </actions>
    </service>

    <service verb="approve" noun="StoreFulfillTransferOrder" transaction-timeout="300">
        <description>
            Service to approve transfer orders where fulfillment is done by OMS i.e. Store to Store and Store to Warehouse Transfer Orders.
            The Order will be updated to ORDER_APPROVED status. The Items will be updated to the next eligible Item
            Status based on the statusFlowId associated with the Transfer Order i.e. ITEM_PENDING_FULFILL.
        </description>
        <in-parameters>
            <parameter name="orderId" required="true">
                <description>The ID of the Transfer Order in OMS.</description>
            </parameter>
        </in-parameters>
        <actions>
            <!-- Get Order Header -->
            <entity-find-one entity-name="org.apache.ofbiz.order.order.OrderHeader" value-field="orderHeader"/>

            <if condition="!orderHeader">
                <message error="true">Transfer Order [ID: ${orderId}] does not exist.</message>
            </if>

            <if condition="orderHeader &amp;&amp; !'TRANSFER_ORDER'.equals(orderHeader.orderTypeId)">
                <message error="true">Order [ID: ${orderId}] is not a Transfer Order.</message>
            </if>

            <if condition="orderHeader &amp;&amp; 'ORDER_APPROVED'.equals(orderHeader.statusId)">
                <message error="true">Transfer Order [ID: ${orderId}] is already in Approved status.</message>
            </if>
            <check-errors/>

            <!-- Update the order status to ORDER_APPROVED -->
            <service-call name="co.hotwax.oms.order.OrderServices.change#OrderStatus" in-map="[orderId:orderId,
                    statusId:'ORDER_APPROVED']"/>

            <!-- Get Order Items -->
            <entity-find entity-name="co.hotwax.order.OrderItemAndShipGroup" list="orderItemList">
                <econdition field-name="orderId"/>
                <econdition field-name="statusId" operator="not-in" value="ITEM_CANCELLED,ITEM_COMPLETED"/>
            </entity-find>

            <!-- Update Order Item Status and Reserve the item -->
            <iterate list="orderItemList" entry="orderItem">
                <!-- Get the next valid Order Item Status start -->
                <!-- Get the Status Flow Transitions for the current item status -->
                <entity-find entity-name="moqui.basic.StatusFlowTransition" list="statusFlowTransitionList">
                    <econdition field-name="statusFlowId" from="orderHeader.statusFlowId"/>
                    <econdition field-name="statusId" from="orderItem.statusId"/>
                    <order-by field-name="transitionSequence"/>
                </entity-find>
                <!-- Here we set the status from the first valid status transition either with or without the
                conditionExpression if defined -->
                <iterate list="statusFlowTransitionList" entry="statusFlowTransition">
                    <if condition="statusFlowTransition.conditionExpression"><then>
                        <if condition="ec.resource.condition(statusFlowTransition.conditionExpression, '')">
                            <set field="toItemStatusId" from="statusFlowTransition.toStatusId"/>
                            <break/>
                        </if>
                    </then><else>
                        <set field="toItemStatusId" from="statusFlowTransition.toStatusId"/>
                        <break/>
                    </else></if>
                </iterate>
                <!-- NOTE Extracting the next valid item status into separate service does not help in scenario say ship#Shipment
                where we need to evaluate the conditionExpression and the variable (isItemFullyIssued in the TO scenario)
                does not get set as expected in the extracted service. -->
                <!-- Get the next valid Order Item Status end -->

                <if condition="!toItemStatusId">
                    <return error="true" message="Cannot Approve Transfer Order [ID: ${orderId}] - No Valid Status Flow transition found for Item [ID: ${orderItem.orderItemSeqId}] Status [ID: ${orderItem.statusId} update.]"/>
                </if>

                <!-- Update the order item status -->
                <service-call name="co.hotwax.oms.order.OrderServices.change#OrderItemStatus"
                        in-map="[orderId:orderId, orderItemSeqId:orderItem.orderItemSeqId,
                        statusId:toItemStatusId, checkCancelCompleteOrder:false]"/>

                <!-- Used process#OrderItemAllocation to reserve item.
                    NOTE index#OrderItem called as part of seca added to this service, but this will not index
                    for TO_Receive_Only items, this will be ok for now as we not use Solr to fetch orders in
                    the Receiving app -->
                <service-call name="co.hotwax.oms.impl.OrderReservationServices.process#OrderItemAllocation"
                        in-map="[orderId:orderId, orderItemSeqId:orderItem.orderItemSeqId,
                        facilityId:orderItem.facilityId, quantity:orderItem.quantity,
                        toShipGroupSeqId:orderItem.shipGroupSeqId]"/>
            </iterate>
        </actions>
    </service>

    <service verb="bulkApprove" noun="WhFulfillTransferOrders" transaction-timeout="3600" authenticate="anonymous-all">
        <description>
            Service to bulk approve transfer orders where fulfillment is done by third party i.e. Warehouse to Store Transfer Orders.
            The Order will be updated to ORDER_APPROVED status. The Items will be updated to the next eligible Item
            Status based on the statusFlowId associated with the Transfer Order i.e. ITEM_PENDING_RECEIPT.
        </description>
        <in-parameters>
            <parameter name="orderIds" type="List">
                <description>List of order Ids to be approved.</description>
            </parameter>
            <parameter name="bufferTime" type="Integer" default-value="1">
                <description>
                    Time to consider as buffer time from order entry date time (in minutes).
                </description>
            </parameter>
        </in-parameters>
        <actions>
            <!-- Get Pending Approval Orders where status flow ID = TO_Receive_Only -->
            <service-call name="co.hotwax.orderledger.order.TransferOrderServices.get#PendingApproveTransferOrders"
                    in-map="[statusFlowIds:'TO_Receive_Only', bufferTime:bufferTime, orderIds:orderIds]"
                    out-map="ordersOut"/>

            <!-- Approve Orders -->
            <iterate list="ordersOut?.orders" entry="order">
                <service-call name="co.hotwax.orderledger.order.TransferOrderServices.approve#WhFulfillTransferOrder"
                        in-map="[orderId:order.orderId]" transaction="force-new" ignore-error="true"/>
            </iterate>
        </actions>
    </service>

    <service verb="approve" noun="WhFulfillTransferOrder" transaction-timeout="300">
        <description>
            Service to bulk approve transfer orders where fulfillment is done by third party i.e. Warehouse to Store Transfer Orders.
            The Order will be updated to ORDER_APPROVED status. The Items will be updated to the next eligible Item
            Status based on the statusFlowId associated with the Transfer Order i.e. ITEM_PENDING_RECEIPT.
        </description>
        <in-parameters>
            <parameter name="orderId" required="true">
                <description>The ID of the Transfer Order in OMS.</description>
            </parameter>
        </in-parameters>
        <actions>
            <!-- Get Order Header -->
            <entity-find-one entity-name="org.apache.ofbiz.order.order.OrderHeader" value-field="orderHeader"/>

            <if condition="!orderHeader">
                <message error="true">Transfer Order [ID: ${orderId}] does not exist.</message>
            </if>

            <if condition="orderHeader &amp;&amp; !'TRANSFER_ORDER'.equals(orderHeader.orderTypeId)">
                <message error="true">Order [ID: ${orderId}] is not a Transfer Order.</message>
            </if>

            <if condition="orderHeader &amp;&amp; 'ORDER_APPROVED'.equals(orderHeader.statusId)">
                <message error="true">Transfer Order [ID: ${orderId}] is already in Approved status.</message>
            </if>
            <check-errors/>

            <!-- Update the order status to ORDER_APPROVED -->
            <service-call name="co.hotwax.oms.order.OrderServices.change#OrderStatus" in-map="[orderId:orderId,
                    statusId:'ORDER_APPROVED']"/>

            <!-- Get Order Items -->
            <entity-find entity-name="co.hotwax.order.OrderItemAndShipGroup" list="orderItemList">
                <econdition field-name="orderId"/>
                <econdition field-name="statusId" operator="not-in" value="ITEM_CANCELLED,ITEM_COMPLETED"/>
            </entity-find>

            <!-- Update Order Item Status and Reserve the item -->
            <iterate list="orderItemList" entry="orderItem">
                <!-- Get the next valid Order Item Status start -->
                <!-- Get the Status Flow Transitions for the current item status -->
                <entity-find entity-name="moqui.basic.StatusFlowTransition" list="statusFlowTransitionList">
                    <econdition field-name="statusFlowId" from="orderHeader.statusFlowId"/>
                    <econdition field-name="statusId" from="orderItem.statusId"/>
                    <order-by field-name="transitionSequence"/>
                </entity-find>
                <!-- Here we set the status from the first valid status transition either with or without the
                conditionExpression if defined -->
                <iterate list="statusFlowTransitionList" entry="statusFlowTransition">
                    <if condition="statusFlowTransition.conditionExpression"><then>
                        <if condition="ec.resource.condition(statusFlowTransition.conditionExpression, '')">
                            <set field="toItemStatusId" from="statusFlowTransition.toStatusId"/>
                            <break/>
                        </if>
                    </then><else>
                        <set field="toItemStatusId" from="statusFlowTransition.toStatusId"/>
                        <break/>
                    </else></if>
                </iterate>
                <!-- NOTE Extracting the next valid item status into separate service does not help in scenario say ship#Shipment
                where we need to evaluate the conditionExpression and the variable (isItemFullyIssued in the TO scenario)
                does not get set as expected in the extracted service. -->
                <!-- Get the next valid Order Item Status end -->

                <if condition="!toItemStatusId">
                    <return error="true" message="Cannot Approve Transfer Order [ID: ${orderId}] - No Valid Status Flow transition found for Item [ID: ${orderItem.orderItemSeqId}] Status [ID: ${orderItem.statusId} update.]"/>
                </if>

                <!-- Update the order item status -->
                <service-call name="co.hotwax.oms.order.OrderServices.change#OrderItemStatus"
                        in-map="[orderId:orderId, orderItemSeqId:orderItem.orderItemSeqId,
                        statusId:toItemStatusId, checkCancelCompleteOrder:false]"/>
            </iterate>
        </actions>
    </service>

    <service verb="cancel" noun="TransferOrder">
        <description>Service to cancel Transfer Order.</description>
        <in-parameters>
            <parameter name="orderId" required="true">
                <description>Transfer Order Id to cancel.</description>
            </parameter>
        </in-parameters>
        <actions>

            <!-- Check if the Order is already in Cancelled status. -->
            <entity-find-count entity-name="org.apache.ofbiz.order.order.OrderHeader" count-field="orderHeaderCount">
                <econdition field-name="orderId"/>
                <econdition field-name="orderTypeId" value="TRANSFER_ORDER"/>
                <econdition field-name="statusId" value="ORDER_CANCELLED"/>
            </entity-find-count>

            <if condition="orderHeaderCount!=0">
                <return error="true" message="Order ID [${orderId}] is already in Cancelled status. Cannot cancel the Order."/>
            </if>

            <!-- Check if any Shipment record exists for the given order then return. -->
            <entity-find-count entity-name="org.apache.ofbiz.shipment.shipment.Shipment" count-field="shipmentCount">
                <econdition field-name="primaryOrderId" from="orderId"/>
                <econdition field-name="statusId" operator="in" value="SHIPMENT_PACKED,SHIPMENT_SHIPPED"/>
            </entity-find-count>

            <if condition="shipmentCount &gt; 0">
                <return error="true" message="Fulfillment process already started for the order [${orderId}]. Cannot cancel the Order."/>
            </if>

            <!-- Check if any Shipment Receipt record exists for the order then return. -->
            <entity-find-count entity-name="org.apache.ofbiz.shipment.receipt.ShipmentReceipt" count-field="shipmentReceiptCount">
                <econdition field-name="orderId"/>
            </entity-find-count>

            <if condition="shipmentReceiptCount &gt; 0">
                <return error="true" message="Receiving process already started for the order [${orderId}]. Cannot cancel the Order."/>
            </if>

            <!-- Get all the items for the given transfer order id. -->
            <entity-find entity-name="org.apache.ofbiz.order.order.OrderItem" list="orderItems">
                <econdition field-name="orderId"/>
            </entity-find>

            <!-- Iterate the orderItems list -->
            <iterate list="orderItems" entry="orderItem">
                <!-- Cancel the orderItem reservations if any -->
                <service-call name="co.hotwax.oms.impl.OrderReservationServices.cancel#OrderItemInventoryReservation"
                              in-map="[orderId:orderId, orderItemSeqId:orderItem.orderItemSeqId, cancelQuantity:orderItem.quantity]"/>

                <service-call name="co.hotwax.oms.order.OrderServices.change#OrderItemStatus" in-map="[orderId:orderId,
                        orderItemSeqId:orderItem.orderItemSeqId, statusId:'ITEM_CANCELLED']"/>
            </iterate>
        </actions>
    </service>

    <service verb="get" noun="TransferOrderGroups">
        <in-parameters>
            <parameter name="orderName"/>
            <parameter name="productStoreId"/>
            <parameter name="facilityId"/>
            <parameter name="orderFacilityId"/>
            <parameter name="shipmentMethodTypeId"/>
            <parameter name="carrierPartyId"/>
            <parameter name="orderStatusId"/>
            <parameter name="fieldsToSelect" default-value="orderId"/>
            <parameter name="pageSize" default-value="20" type="Integer"/>
            <parameter name="pageIndex" default-value="0" type="Integer"/>
            <parameter name="orderByField" default-value="-orderDate"/>
        </in-parameters>
        <out-parameters>
            <parameter name="ordersCount" type="Integer"/>
            <parameter name="orders" type="List"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="co.hotwax.oms.order.TransferOrderAndItem" limit="pageSize" offset="pageIndex * pageSize" list="orders" distinct="true">
                <econdition field-name="orderName" operator="like" value="%${orderName}%" ignore="!orderName"/>
                <econdition field-name="facilityId" ignore-if-empty="true"/>
                <econdition field-name="orderFacilityId" ignore-if-empty="true"/>
                <econdition field-name="productStoreId" ignore-if-empty="true"/>
                <econdition field-name="shipmentMethodTypeId" ignore-if-empty="true"/>
                <econdition field-name="carrierPartyId" ignore-if-empty="true"/>
                <econdition field-name="orderStatusId" ignore-if-empty="true"/>
                <select-field field-name="${fieldsToSelect}"/>
                <order-by field-name="${orderByField}"/>
            </entity-find>

            <!-- Set the field ordersCount from the orders list. -->
            <set field="ordersCount" from="orders_xafind.count()"/>
        </actions>
    </service>

    <service verb="get" noun="TransferOrderItems">
        <in-parameters>
            <parameter name="orderName"/>
            <parameter name="orderId"/>
            <parameter name="facilityId"/>
            <parameter name="orderFacilityId"/>
            <parameter name="productId"/>
            <parameter name="productStoreId"/>
            <parameter name="shipmentMethodTypeId"/>
            <parameter name="carrierPartyId"/>
            <parameter name="orderStatusId"/>
            <parameter name="pageSize" default-value="20" type="Integer"/>
            <parameter name="pageIndex" default-value="0" type="Integer"/>
            <parameter name="orderByField" default-value="-orderDate"/>
        </in-parameters>
        <out-parameters>
            <parameter name="transferOrderItems" type="List"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="co.hotwax.oms.order.TransferOrderAndItem" limit="pageSize" offset="pageIndex * pageSize" list="orderItems" distinct="true">
                <econdition field-name="orderName" operator="like" value="%${orderName}%" ignore="!orderName"/>
                <econdition field-name="orderId" ignore-if-empty="true"/>
                <econdition field-name="facilityId" ignore-if-empty="true"/>
                <econdition field-name="orderFacilityId" ignore-if-empty="true"/>
                <econdition field-name="productId" ignore-if-empty="true"/>
                <econdition field-name="productStoreId" ignore-if-empty="true"/>
                <econdition field-name="shipmentMethodTypeId" ignore-if-empty="true"/>
                <econdition field-name="carrierPartyId" ignore-if-empty="true"/>
                <econdition field-name="orderStatusId" ignore-if-empty="true"/>
                <order-by field-name="${orderByField}"/>
            </entity-find>

            <set field="transferOrderItems" from="[]"/>

            <iterate list="orderItems" entry="orderItem">
                <set field="transferOrderItem" from="orderItem.getPlainValueMap(0)"/>

                <!-- Get total Issued quantity for the item -->
                <entity-find entity-name="co.hotwax.shipment.ItemIssuanceSummary" list="itemIssuanceList">
                    <econdition field-name="orderId" from="orderItem.orderId"/>
                    <econdition field-name="orderItemSeqId" from="orderItem.orderItemSeqId"/>
                    <select-field field-name="orderId,orderItemSeqId,quantity"/>
                </entity-find>

                <!-- Get total Received Quantity for the item -->
                <entity-find entity-name="co.hotwax.shipment.ShipmentReceiptSummary" list="shipmentReceiptList">
                    <econdition field-name="orderId" from="orderItem.orderId"/>
                    <econdition field-name="orderItemSeqId" from="orderItem.orderItemSeqId"/>
                    <select-field field-name="orderId,orderItemSeqId,quantityAccepted"/>
                </entity-find>

                <!-- Put the shippedQuantity and receivedQuantity in transferOrderItem -->
                <set field="transferOrderItem.shippedQuantity" from="itemIssuanceList?.first?.quantity"/>
                <set field="transferOrderItem.receivedQuantity" from="shipmentReceiptList?.first?.quantityAccepted"/>

                <!-- Add the transferOrderItem map to the TransferOrderItems list -->
                <script>
                    transferOrderItems.add(transferOrderItem)
                </script>
            </iterate>
        </actions>
    </service>

    <service verb="update" noun="TransferOrderItem">
        <description>Service to update the Transfer Order Item Quantity.</description>
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderItemSeqId" required="true"/>
            <parameter name="quantity" type="Integer" required="true"/>
        </in-parameters>
        <actions>

            <!-- Check if the order is in Created status. -->
            <!-- If the Order is not in Created status then return a warning. -->
            <entity-find entity-name="org.apache.ofbiz.order.order.OrderHeader" list="orderHeader">
                <econdition field-name="orderId"/>
                <econdition field-name="statusId" value="ORDER_CREATED"/>
                <econdition field-name="orderTypeId" value="TRANSFER_ORDER"/>
            </entity-find>

            <if condition="!orderHeader">
                <return error="true" message="Order [${orderId}] not in CREATED status. Cannot edit ordered quantity"/>
            </if>

            <!-- Fetch the orderItem detail for the incoming orderItemSeqId -->
            <entity-find-one entity-name="org.apache.ofbiz.order.order.OrderItem" value-field="orderItem">
                <field-map field-name="orderId"/>
                <field-map field-name="orderItemSeqId"/>
            </entity-find-one>

            <!-- If no orderItem for the incoming orderItemSeqId then return error -->
            <if condition="!orderItem">
                <return error="true" message="OrderItem [${orderItemSeqId}] not found for Order [${orderId}]"/>
            </if>

            <set field="currentQuantity" from="orderItem.quantity"/>
            <set field="currentUnitPrice" from="orderItem.unitPrice"/>
            <set field="grandTotal" from="orderHeader.first.grandTotal"/>

            <!-- Calculate the new order total and the old order total as per the incoming quantity
                and the orderItems's current unitPrice and quantity -->

            <set field="oldTotal" from="currentQuantity * (currentUnitPrice ?:0.0)"/>
            <set field="newTotal" from="quantity * (currentUnitPrice ?:0.0)"/>

            <set field="adjustment" from="newTotal - oldTotal"/>

            <if condition="adjustment != 0">
                <set field="grandTotal" from="(grandTotal ?: 0.0) + adjustment"/>
            </if>

            <!-- Update the OrderItem quantity with the incoming quantity -->
            <service-call name="update#org.apache.ofbiz.order.order.OrderItem" in-map="[orderId:orderId, orderItemSeqId:orderItemSeqId, quantity:quantity]"/>

            <!-- Update the grandTotal in the OrderHeader -->
            <service-call name="update#org.apache.ofbiz.order.order.OrderHeader" in-map="[orderId:orderId, grandTotal:grandTotal]"/>
        </actions>
    </service>

    <service verb="add" noun="TransferOrderItem">
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="productId" required="true"/>
            <parameter name="quantity" default-value="1" type="Integer"/>
            <parameter name="shipGroupSeqId" required="true"/>
            <parameter name="unitPrice" type="BigDecimal" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="orderId"/>
            <parameter name="orderItemSeqId"/>
        </out-parameters>
        <actions>

            <!-- Check if the order is in Created status. -->
            <!-- If the Order is not in Created status then return a warning. -->
            <entity-find entity-name="org.apache.ofbiz.order.order.OrderHeader" list="orderHeader">
                <econdition field-name="orderId"/>
                <econdition field-name="statusId" value="ORDER_CREATED"/>
                <econdition field-name="orderTypeId" value="TRANSFER_ORDER"/>
            </entity-find>

            <if condition="!orderHeader">
                <return error="true" message="Order [${orderId}] not in CREATED status. Cannot add new order items."/>
            </if>

            <!-- Set the OrderItem map to create OrderItem record -->
            <set field="orderItem" from="[orderId:orderId,quantity:quantity,productId:productId, statusId:'ITEM_CREATED', unitPrice:unitPrice, shipGroupSeqId:shipGroupSeqId,
                 statuses:[orderId:orderId,statusId:'ITEM_CREATED']]"/>

            <!-- Create the OrderItem with the incoming product. -->
            <service-call name="create#org.apache.ofbiz.order.order.OrderItem" in-map="orderItem" out-map="context"/>

            <!-- Set the grandTotal field from the unitPrice and quantity -->
            <set field="grandTotal" from="(orderHeader.first.grandTotal ?: 0) + ((unitPrice ?: 0) * quantity)"/>

            <!--Update the grandTotal in the OrderHeader -->
            <service-call name="update#org.apache.ofbiz.order.order.OrderHeader" in-map="[orderId:orderId, grandTotal:grandTotal]"/>
        </actions>
    </service>
</services>
