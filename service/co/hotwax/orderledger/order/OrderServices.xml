<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://moqui.org/xsd/service-definition-3.xsd">

    <!-- Service to cancel sales order item record -->
    <service verb="cancel" noun="SalesOrderItem">
        <description>Cancels a sales order item</description>
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderItemSeqId" required="true"/>
            <parameter name="shipGroupSeqId" required="true"/>
            <parameter name="reason"/>
            <parameter name="comment"/>
        </in-parameters>
        <actions>
            <!-- Validate the order item is already cancelled or completed -->
            <entity-find-one entity-name="org.apache.ofbiz.order.order.OrderItem" value-field="orderItem">
                <field-map field-name="orderId" from="orderId"/>
                <field-map field-name="orderItemSeqId" from="orderItemSeqId"/>
            </entity-find-one>
            <if condition="!orderItem">
                <!-- Log the error message and return from the service -->
                <return type="warning" message="OrderItem [ID: ${orderId}:${orderItemSeqId}] - Not found"/>
            </if>

            <!-- Validate the change reason Enumeration -->
            <entity-find-one entity-name="moqui.basic.Enumeration" value-field="reasonEnum" cache="true">
                <field-map field-name="enumId" from="reason"/>
            </entity-find-one>
            <if condition="!reasonEnum">
                <!-- Log the error message and return from the service -->
                <return type="warning" message="Cancel Reason Enumeration [EnumId:${reason}] - Not found"/>
            </if>

            <!-- Validate if the order item is completed or already cancelled -->
            <if condition="orderItem.statusId == 'ITEM_CANCELLED' || orderItem.statusId == 'ITEM_COMPLETED'">
                <!-- Log the error message and return from the service -->
                <return type="warning" message="OrderItem [ID: ${orderId}:${orderItemSeqId}] - Already cancelled or completed"/>
            </if>

            <!-- Update the order item cancel quantity -->
            <set field="orderItem.cancelQuantity" value="1"/>
            <entity-update value-field="orderItem"/>

            <!-- Call create#OrderItemChange service to register the cancellation -->
            <service-call name="create#org.apache.ofbiz.order.order.OrderItemChange" in-map="[orderId:orderId, orderItemSeqId:orderItemSeqId,
                    changeTypeEnumId:'ODR_ITM_CANCEL', reasonEnumId:reasonEnum.enumId, changeComments:comment, cancelQuantity:1,
                    changeDatetime:ec.user.nowTimestamp]"/>
            <!-- TODO: changeUserLogin; changeUserLogin:context.userLogin -->

            <!-- Call create#NoteData service to add information as a note -->
            <service-call name="create#org.apache.ofbiz.common.note.NoteData" in-map="[noteInfo:'Cancelled item to order: ' + orderId + ', item: ' + orderItemSeqId,
                    noteDateTime:ec.user.nowTimestamp]" out-map="noteDataResponse"/>
            <!-- Call create#OrderHeaderNote service to associate the created note to the order -->
            <service-call name="create#org.apache.ofbiz.order.order.OrderHeaderNote" in-map="[orderId:orderId, noteId:noteDataResponse.noteId]"/>
            <!-- TODO: internalNote:Y or N ; Also we can save the comment/reason as a part of the note-->

            <!-- Call cancel#OrderItemInventoryReservation to cancel the inventory reservation -->
            <service-call name="co.hotwax.oms.impl.OrderReservationServices.cancel#OrderItemInventoryReservation" in-map="[orderId:orderId, orderItemSeqId:orderItemSeqId,
                    cancelQuantity:orderItem.quantity]"/>

            <!-- Call get#OrderItemSalesTaxTotal inline and get the sales tax total of the order item -->
            <service-call name="co.hotwax.oms.order.OrderServices.get#OrderItemSalesTaxTotal" in-map="[orderId:orderId, orderItemSeqId:orderItemSeqId]" out-map="orderItemSalesTaxTotalResponse"/>
            <set field="itemTaxTotal" from="orderItemSalesTaxTotalResponse.itemTaxTotal" type="BigDecimal" />

            <!-- If taxTotal is greater than zero, then call create#OrderAdjustment inline to create negative sales tax amount for the order item-->
            <if condition="itemTaxTotal.compareTo(BigDecimal.ZERO) &gt; 0">
                <service-call name="create#org.apache.ofbiz.order.order.OrderAdjustment" in-map="[orderId:orderId, orderItemSeqId:orderItemSeqId,
                        shipGroupSeqId:'_NA_', orderAdjustmentTypeId:'SALES_TAX', description:'Tax adjustment on item cancellation',
                        amount:-itemTaxTotal]"/>
                <!-- TODO: Discuss the setting of shipGroupSeqId=_NA_ -->
            </if>

            <!-- Call create#CommunicationEvent to register the event -->
            <service-call name="create#org.apache.ofbiz.party.communication.CommunicationEvent" in-map="[orderId:orderId, communicationEventTypeId:'API_COMMUNICATION',
                    communicationEventTypeEnumId:'API_CANCEL_ORDER_ITEM', content:'Shopify Order Item Cancel: OrderId:' + orderId + ', itemSeqId: ' + orderItem.orderItemSeqId + ', Qty [' + BigDecimal.ONE.intValue() + ']', datetimeStarted:ec.user.nowTimestamp]"/>
            <!-- TODO: Discuss messaging in the communicationEvent logging -->

            <!-- Call change#OrderItemStatus service to change the order item status -->
            <service-call name="co.hotwax.oms.order.OrderServices.change#OrderItemStatus" in-map="[orderId:orderId, orderItemSeqId:orderItemSeqId,
                    statusId:'ITEM_CANCELLED', changeReason:reasonEnum.enumId, statusDateTime:ec.user.nowTimestamp]"/>

        </actions>
    </service>
    <!-- NOTE This service is being used to fetch Eligible Store Pickup Orders in the BOPIS App -->
    <service verb="get" noun="StorePickupOrders">
        <description>
            Service to get BOPIS Orders primarily.
            By default, the service will return orders with status ORDER_APPROVED.
        </description>
        <in-parameters>
            <parameter name="orderId">
                <description>The ID of the Order in OMS.</description>
            </parameter>
            <parameter name="orderStatusId" default-value="ORDER_APPROVED">
                <description>The status of the Order in OMS.</description>
            </parameter>
            <parameter name="originFacilityId">
                <description>The source facility ID of the Order in OMS.</description>
            </parameter>
            <parameter name="shipmentMethodTypeId" default-value="STOREPICKUP"/>
            <parameter name="shipmentStatusId" default-value="SHIPMENT_INPUT,SHIPMENT_PACKED,SHIPMENT_SHIPPED">
                <description>List of comma separated shipment statuses</description>
            </parameter>
            <parameter name="shipmentStatusId_op" default-value="in"/>
            <parameter name="shipmentStatusId_not" default-value="Y"/>
            <parameter name="keyword">
                <description>The passed value is searched in orderId and orderName with LIKE operator.</description>
            </parameter>
            <parameter name="pageIndex" type="Integer" default="0">
                <description>Page number to return, starting with zero.</description>
            </parameter>
            <parameter name="limit" type="Integer" default="20">
                <description>Number of records per page (default 20).</description>
            </parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="orders" type="List"/>
            <parameter name="ordersCount" type="Integer"/>
        </out-parameters>
        <actions>
            <!-- Fetch distinct orders with passed filters -->
            <entity-find entity-name="co.hotwax.oms.order.OrderHeaderItemShipGroup" limit="limit" offset="pageIndex" list="ordersList" distinct="true">
                <search-form-inputs/>
                <econdition field-name="orderTypeId" value="SALES_ORDER"/>
                <econdition field-name="shipmentMethodTypeId" ignore-if-empty="true"/>
                <econdition field-name="facilityId" from="originFacilityId" ignore-if-empty="true"/>
                <econdition field-name="orderStatusId"/>
                <econditions combine="or">
                    <econdition field-name="orderId" from="orderId" ignore-if-empty="true"/>
                    <econdition field-name="orderId" operator="like" value="%${keyword}%" ignore-if-empty="true"/>
                    <econdition field-name="orderName" operator="like" value="%${keyword}%" ignore-if-empty="true"/>
                </econditions>
                <econdition field-name="orderId" ignore-if-empty="true"/>
                <select-field field-name="orderId,orderName,orderExternalId,orderStatusId,orderStatusDesc,orderDate,facilityId"/>
            </entity-find>
            <!-- Initialize the eligible orders list -->
            <set field="orders" from="[]"/>

            <iterate list="ordersList" entry="orderHeader">
                <set field="order" from="[:]"/>
                <set field="order.orderId" from="orderHeader.orderId"/>
                <set field="order.orderName" from="orderHeader.orderName"/>
                <set field="order.orderExternalId" from="orderHeader.orderExternalId"/>
                <set field="order.orderStatusId" from="orderHeader.orderStatusId"/>
                <set field="order.orderStatusDesc" from="orderHeader.orderStatusDesc"/>
                <set field="order.orderDate" from="orderHeader.orderDate"/>
                <set field="order.facilityId" from="orderHeader.facilityId"/>
                <set field="order.items" from="[]"/>

                <entity-find entity-name="org.apache.ofbiz.shipment.shipment.PicklistShipmentAndItem" list="picklistShipment" limit="1">
                    <search-form-inputs default-order-by="-createdDate"/>
                    <econdition field-name="orderId" from="orderHeader.orderId"/>
                    <econdition field-name="facilityId" from="originFacilityId" ignore-if-empty="true"/>
                    <econdition field-name="shipmentMethodTypeId" ignore-if-empty="true"/>
                    <select-field field-name="picklistId,shipmentId,shipmentStatusId"/>
                </entity-find>
                <if condition="picklistShipment">
                    <set field="order.picklistId" from="picklistShipment[0].picklistId"/>
                    <set field="order.shipmentId" from="picklistShipment[0].shipmentId"/>
                    <else>
                        <entity-find entity-name="org.apache.ofbiz.shipment.shipment.PicklistShipmentAndItem" list="picklistShipment" limit="1">
                            <econdition field-name="orderId" from="orderHeader.orderId"/>
                            <econdition field-name="facilityId" from="originFacilityId" ignore-if-empty="true"/>
                            <econdition field-name="shipmentMethodTypeId" ignore-if-empty="true"/>
                            <select-field field-name="picklistId,shipmentId,shipmentStatusId"/>
                        </entity-find>
                        <if condition="(picklistShipment &amp;&amp; shipmentStatusId_not == 'Y') || (!picklistShipment &amp;&amp; shipmentStatusId_not != 'Y')">
                            <continue/>
                        </if>
                    </else>
                </if>

                <!-- Fetch items for this order -->
                <entity-find entity-name="co.hotwax.order.OrderItemAndShipGroup" list="orderItems">
                    <econdition field-name="orderId" from="orderHeader.orderId"/>
                    <econdition field-name="facilityId" from="originFacilityId" ignore-if-empty="true"/>
                    <econdition field-name="shipmentMethodTypeId" ignore-if-empty="true"/>
                    <select-field field-name="orderId,orderItemSeqId,shipGroupSeqId,shipmentMethodTypeId,productId,quantity,unitPrice,
                        statusId,shippingInstructions,facilityId"/>
                </entity-find>

                <!-- Build items list -->
                <set field="order.items" from="orderItems"/>

                <!-- Fetch BILL_TO_CUSTOMER role -->
                <entity-find-one entity-name="org.apache.ofbiz.order.order.OrderRole" value-field="billToCustomer">
                    <field-map field-name="orderId" from="orderHeader.orderId"/>
                    <field-map field-name="roleTypeId" value="BILL_TO_CUSTOMER"/>
                    <select-field field-name="partyId"/>
                </entity-find-one>

                <if condition="billToCustomer">
                    <!-- Fetch Person name based on partyId -->
                    <entity-find-one entity-name="org.apache.ofbiz.party.party.Person" value-field="person" cache="true">
                        <field-map field-name="partyId" from="billToCustomer.partyId"/>
                        <select-field field-name="firstName,lastName"/>
                    </entity-find-one>

                    <set field="order.customerId" from="billToCustomer.partyId"/>
                    <set field="order.customerName" from="person.firstName + ' ' + person.lastName"/>
                </if>

                <!-- Add this order with its items to final orders list -->
                <set field="orders" from="orders + order"/>
            </iterate>
            <set field="ordersCount" from="orders.size()"/>
        </actions>
    </service>
    <service verb="get" noun="SalesOrders">
        <in-parameters>
            <parameter name="orderId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="orderDetail" type="Map">
                <parameter name="orderId"/>
                <parameter name="orderName"/>
                <parameter name="orderExternalId"/>
                <parameter name="orderDate"/>
                <parameter name="orderStatusId"/>
                <parameter name="productStoreId"/>
                <parameter name="entryDate"/>
                <parameter name="grandTotal"/>
                <parameter name="currencyUom"/>
                <parameter name="salesChannel"/>
                <parameter name="partyId"/>
                <parameter name="roleTypeId"/>
                <parameter name="customerFirstName"/>
                <parameter name="customerLastName"/>
                <parameter name="shipGroups" type="List">
                    <parameter name="shipGroup" type="Map">
                        <parameter name="shipGroupSeqId"/>
                        <parameter name="shipmentMethodTypeId"/>
                        <parameter name="shipmentMethodTypeDesc"/>
                        <parameter name="shipmentId"/>
                        <parameter name="shipmentStatusId"/>
                        <parameter name="trackingCode"/>
                        <parameter name="carrierPartyId"/>
                        <parameter name="facilityId"/>
                        <parameter name="facilityTypeId"/>
                        <parameter name="facilityTypeDescription"/>
                        <parameter name="picklistId"/>
                        <parameter name="picklistDate"/>
                        <parameter name="pickerId"/>
                        <parameter name="pickerFirstName"/>
                        <parameter name="pickerLastName"/>
                        <parameter name="items" type="List">
                            <parameter name="item" type="Map">
                                <parameter name="orderId"/>
                                <parameter name="orderItemSeqId"/>
                                <parameter name="shipGroupSeqId"/>
                                <parameter name="facilityId"/>
                                <parameter name="productId"/>
                                <parameter name="productTypeId"/>
                                <parameter name="quantity"/>
                                <parameter name="unitPrice"/>
                            </parameter>
                        </parameter>
                    </parameter>
                </parameter>
                <parameter name="billingAddress" type="Map">
                    <parameter name="contactMechId"/>
                    <parameter name="toName"/>
                    <parameter name="attnName"/>
                    <parameter name="address1"/>
                    <parameter name="address2"/>
                    <parameter name="houseNumber"/>
                    <parameter name="houseNumberExt"/>
                    <parameter name="directions"/>
                    <parameter name="city"/>
                    <parameter name="cityGeoId"/>
                    <parameter name="postalCode"/>
                    <parameter name="postalCodeExt"/>
                    <parameter name="countryGeoId"/>
                    <parameter name="stateProvinceGeoId"/>
                    <parameter name="countyGeoId"/>
                    <parameter name="municipalityGeoId"/>
                    <parameter name="postalCodeGeoId"/>
                    <parameter name="geoPointId"/>
                    <parameter name="encodedAddressKey"/>
                    <parameter name="latitude"/>
                    <parameter name="longitude"/>
                    <parameter name="stateGeoName"/>
                    <parameter name="countryGeoName"/>
                </parameter>
                <parameter name="billingEmail"/>
                <parameter name="billingPhone" type="Map">
                    <parameter name="contactMechId"/>
                    <parameter name="countryCode"/>
                    <parameter name="areaCode"/>
                    <parameter name="contactNumber"/>
                    <parameter name="askForName"/>
                </parameter>
                <parameter name="attributes" type="List">
                    <parameter name="attribute" type="Map">
                        <parameter name="orderId"/>
                        <parameter name="attrName"/>
                        <parameter name="attrValue"/>
                    </parameter>
                </parameter>
                <parameter name="statuses" type="List">
                    <parameter name="status" type="Map">
                        <parameter name="orderId"/>
                        <parameter name="statusId"/>
                        <parameter name="statusDateTime"/>
                    </parameter>
                </parameter>
                <parameter name="paymentPreferences" type="List">
                    <parameter name="paymentPreference" type="Map">
                        <parameter name="orderId"/>
                        <parameter name="orderItemSeqId"/>
                        <parameter name="paymentMethodTypeId"/>
                        <parameter name="paymentMethodTypeDesc"/>
                        <parameter name="maxAmount"/>
                        <parameter name="statusId"/>
                        <parameter name="statusDesc"/>
                        <parameter name="createdDate"/>
                    </parameter>
                </parameter>
            </parameter>
        </out-parameters>
        <actions>
            <!-- The following view returns all the shipment details for the order; if exists at item level -->
            <entity-find entity-name="co.hotwax.warehouse.OrderItemShipmentDetail" list="orderItemShipments">
                <econdition field-name="orderId"/>
                <order-by field-name="shipGroupSeqId"/>
            </entity-find>

            <entity-find entity-name="org.apache.ofbiz.shipment.shipment.ShipmentMethodType" list="shipmentMethodTypes">
                <select-field field-name="shipmentMethodTypeId,description"/>
            </entity-find>
            <set field="orderDetail" from="[:]"/>
            <if condition="orderItemShipments">
                <set field="orderDetail.orderId" from="orderItemShipments[0].orderId"/>
                <set field="orderDetail.orderName" from="orderItemShipments[0].orderName"/>
                <set field="orderDetail.orderExternalId" from="orderItemShipments[0].orderExternalId"/>
                <set field="orderDetail.orderDate" from="orderItemShipments[0].orderDate"/>
                <set field="orderDetail.orderStatusId" from="orderItemShipments[0].orderStatusId"/>
                <set field="orderDetail.productStoreId" from="orderItemShipments[0].productStoreId"/>
                <set field="orderDetail.entryDate" from="orderItemShipments[0].entryDate"/>
                <set field="orderDetail.grandTotal" from="orderItemShipments[0].grandTotal"/>
                <set field="orderDetail.currencyUom" from="orderItemShipments[0].currency"/>
                <set field="orderDetail.salesChannel" from="orderItemShipments[0].salesChannel"/>
                <set field="orderDetail.partyId" from="orderItemShipments[0].customerPartyId"/>
                <set field="orderDetail.roleTypeId" from="orderItemShipments[0].roleTypeId"/>
                <set field="orderDetail.customerFirstName" from="orderItemShipments[0].customerFirstName"/>
                <set field="orderDetail.customerLastName" from="orderItemShipments[0].customerLastName"/>
                <set field="shipGroups" from="[]"/>

                <entity-find entity-name="org.apache.ofbiz.shipment.shipment.PicklistShipmentAndRole" list="picklistShipmentAndRoles">
                    <econdition field-name="orderId"/>
                </entity-find>

                <iterate list="orderItemShipments" entry="orderItemShipment">
                    <set field="existingShipGroup" from="shipGroups.find{ it.shipGroupSeqId == orderItemShipment.shipGroupSeqId }"/>
                    <set field="existingPicklistShipmentAndRole" from="picklistShipmentAndRoles.find{ it.shipmentId == orderItemShipment.shipmentId &amp;&amp; it.shipGroupSeqId == orderItemShipment.shipGroupSeqId }"/>
                    <if condition="existingShipGroup">
                        <set field="item" from="[:]"/>
                        <set field="item.orderId" from="orderItemShipment.orderId"/>
                        <set field="item.orderItemSeqId" from="orderItemShipment.orderItemSeqId"/>
                        <set field="item.shipGroupSeqId" from="orderItemShipment.shipGroupSeqId"/>
                        <set field="item.facilityId" from="orderItemShipment.facilityId"/>
                        <set field="item.productId" from="orderItemShipment.productId"/>
                        <set field="item.productTypeId" from="orderItemShipment.productTypeId"/>
                        <set field="item.quantity" from="orderItemShipment.itemQuantity"/>
                        <set field="item.unitPrice" from="orderItemShipment.unitPrice"/>
                        <set field="existingShipGroup.items" from="existingShipGroup.items + item"/>
                        <else>
                            <set field="shipGroup" from="[:]"/>
                            <set field="shipGroup.shipGroupSeqId" from="orderItemShipment.shipGroupSeqId"/>
                            <set field="shipGroup.shipmentMethodTypeId" from="orderItemShipment.slaShipmentMethodTypeId"/>
                            <set field="shipGroup.shipmentMethodTypeDesc" from="shipmentMethodTypes.find{ it.shipmentMethodTypeId == orderItemShipment.slaShipmentMethodTypeId }?.description"/>
                            <set field="shipGroup.shipmentId" from="orderItemShipment.shipmentId"/>
                            <set field="shipGroup.shipmentStatusId" from="orderItemShipment.shipmentStatusId"/>
                            <set field="shipGroup.trackingCode" from="orderItemShipment.trackingNumber"/>
                            <set field="shipGroup.carrierPartyId" from="orderItemShipment.carrierPartyId"/>
                            <set field="shipGroup.facilityId" from="orderItemShipment.facilityId"/>
                            <set field="shipGroup.facilityTypeId" from="orderItemShipment.facilityTypeId"/>
                            <set field="shipGroup.facilityTypeDescription" from="orderItemShipment.facilityTypeDesc"/>
                            <set field="shipGroup.picklistId" from="existingPicklistShipmentAndRole?.picklistId"/>
                            <set field="shipGroup.picklistDate" from="existingPicklistShipmentAndRole?.picklistDate"/>
                            <set field="shipGroup.pickerId" from="existingPicklistShipmentAndRole?.partyId"/>
                            <set field="shipGroup.pickerFirstName" from="existingPicklistShipmentAndRole?.firstName"/>
                            <set field="shipGroup.pickerLastName" from="existingPicklistShipmentAndRole?.lastName"/>
                            <set field="item" from="[:]"/>
                            <set field="item.orderId" from="orderItemShipment.orderId"/>
                            <set field="item.orderItemSeqId" from="orderItemShipment.orderItemSeqId"/>
                            <set field="item.shipGroupSeqId" from="orderItemShipment.shipGroupSeqId"/>
                            <set field="item.facilityId" from="orderItemShipment.facilityId"/>
                            <set field="item.productId" from="orderItemShipment.productId"/>
                            <set field="item.productTypeId" from="orderItemShipment.productTypeId"/>
                            <set field="item.quantity" from="orderItemShipment.itemQuantity"/>
                            <set field="item.unitPrice" from="orderItemShipment.unitPrice"/>
                            <set field="shipGroup.items" from="[item]"/>
                            <set field="shipGroups" from="shipGroups + shipGroup"/>
                        </else>
                    </if>
                </iterate>

                <set field="orderDetail.shipGroups" from="shipGroups"/>
                <entity-find entity-name="org.apache.ofbiz.order.order.OrderContactMech" list="orderContactMechList">
                    <econdition field-name="orderId"/>
                    <econdition field-name="contactMechPurposeTypeId" operator="in" value="BILLING_LOCATION,BILLING_EMAIL,PHONE_BILLING"/>
                    <order-by field-name="-lastUpdatedStamp"/>
                </entity-find>

                <!-- If orderContactMechList then fetch the billTo details using the contactMechIds -->
                <if condition="orderContactMechList">
                    <set field="billingAddressContactMechId" from="orderContactMechList.find{ 'BILLING_LOCATION'.equals(it.contactMechPurposeTypeId) }?.contactMechId"/>
                    <set field="billingEmailContactMech" from="orderContactMechList.find{ 'BILLING_EMAIL'.equals(it.contactMechPurposeTypeId) }"/>
                    <set field="billingPhoneContactMechId" from="orderContactMechList.find{ 'PHONE_BILLING'.equals(it.contactMechPurposeTypeId) }?.contactMechId"/>

                    <if condition="billingAddressContactMechId">
                        <!-- Get the BillTo Postal Address Details -->
                        <entity-find-one entity-name="co.hotwax.oms.contact.PostalAddressAndGeo" value-field="billingAddressMap">
                            <field-map field-name="contactMechId" from="billingAddressContactMechId"/>
                        </entity-find-one>
                    </if>

                    <if condition="billingEmailContactMech">
                        <!-- Get the BillTo Email Address Details -->
                        <entity-find-related-one value-field="billingEmailOrderContactMech" relationship-name="org.apache.ofbiz.party.contact.ContactMech" to-value-field="billingEmailContactMech"/>
                    </if>

                    <if condition="billingPhoneContactMechId">
                        <!-- Get the BillTo Phone Number Details -->
                        <entity-find-one entity-name="org.apache.ofbiz.party.contact.TelecomNumber" value-field="billingPhoneDetails">
                            <field-map field-name="contactMechId" from="billingPhoneContactMechId"/>
                        </entity-find-one>
                    </if>
                </if>

                <set field="orderDetail.billingAddress" from="billingAddressMap ? billingAddressMap.getMap() : [:] "/>
                <set field="orderDetail.billingEmail" from="billingEmailContactMech?.infoString"/>
                <set field="orderDetail.billingPhone" from="billingPhoneDetails"/>

                <entity-find entity-name="org.apache.ofbiz.order.order.OrderAttribute" list="orderAttributes">
                    <econdition field-name="orderId"/>
                    <select-field field-name="orderId,attrName,attrValue"/>
                </entity-find>
                <set field="orderDetail.attributes" from="orderAttributes"/>

                <entity-find entity-name="org.apache.ofbiz.order.order.OrderStatus" list="orderStatuses">
                    <econdition field-name="orderId"/>
                    <econdition field-name="statusId" operator="in" from="['ORDER_CREATED','ORDER_APPROVED','ORDER_COMPLETED']"/>
                    <select-field field-name="orderId,statusId,statusDateTime"/>
                </entity-find>
                <set field="orderDetail.statuses" from="orderStatuses"/>

                <entity-find entity-name="co.hotwax.order.OrderPaymentPreferenceView" list="orderPaymentPreferences">
                    <econdition field-name="orderId"/>
                    <econdition field-name="statusId" operator="not-equals" value="PAYMENT_CANCELLED"/>
                    <select-field field-name="orderId,orderItemSeqId,paymentMethodTypeId,paymentMethodTypeDesc,maxAmount,statusId,statusDesc,createdDate"/>
                </entity-find>
                <set field="orderDetail.paymentPreferences" from="orderPaymentPreferences"/>
            </if>
        </actions>
    </service>
</services>
