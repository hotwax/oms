<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://moqui.org/xsd/service-definition-3.xsd">

    <service verb="get" noun="OrderItemSalesTaxTotal">
        <description>Get the sales tax total for an order item</description>
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderItemSeqId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="itemTaxTotal" required="true" type="BigDecimal"/>
        </out-parameters>
        <actions>
            <!-- Validate the order item -->
            <entity-find-one entity-name="org.apache.ofbiz.order.order.OrderItem" value-field="orderItem">
                <field-map field-name="orderId" from="orderId"/>
                <field-map field-name="orderItemSeqId" from="orderItemSeqId"/>
            </entity-find-one>
            <if condition="!orderItem">
                <return type="warning" message="OrderItem [ID: ${orderId}:${orderItemSeqId}] - Not found"/>
            </if>

            <set field="itemTaxTotal" from="0.0"/>

            <!-- Get the sales tax total for order item using the OrderAdjustment entity -->
            <entity-find entity-name="org.apache.ofbiz.order.order.OrderAdjustment" list="orderAdjustments">
                <econdition field-name="orderId" from="orderId"/>
                <econdition field-name="orderItemSeqId" from="orderItemSeqId"/>
                <econdition field-name="orderAdjustmentTypeId" value="SALES_TAX"/>
                <select-field field-name="amount"/>
            </entity-find>
            <if condition="!orderAdjustments">
                <!-- If no sales tax adjustments are found then return -->
                <return type="info" message="Sales Tax OrderAdjustment [ID: ${orderId}:${orderItemSeqId}] - Not found"/>
            </if>

            <!-- Get the sales tax total amount by adding each adjustment's amount -->
            <iterate list="orderAdjustments" entry="orderAdjustment">
                <set field="itemTaxTotal" from="itemTaxTotal.add(orderAdjustment.amount)"/>
            </iterate>
        </actions>
    </service>

    <service verb="change" noun="OrderItemStatus">
        <description>Change the status of a sales order item</description>
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderItemSeqId" required="true"/>
            <parameter name="statusId" required="true"/>
            <parameter name="changeReason"/>
            <parameter name="statusDateTime"/>
            <parameter name="checkCancelCompleteOrder" type="Boolean" default-value="true"/>
        </in-parameters>
        <actions>
            <!-- Get the order item -->
            <entity-find-one entity-name="org.apache.ofbiz.order.order.OrderItem" value-field="orderItem">
                <field-map field-name="orderId" from="orderId"/>
                <field-map field-name="orderItemSeqId" from="orderItemSeqId"/>
            </entity-find-one>
            <!-- Log and return with error if order item doesn't exist -->
            <if condition="!orderItem">
                <return type="warning" message="OrderItem [ID: ${orderId}:${orderItemSeqId}] - Not found"/>
            </if>

            <!-- Update the status of the order item -->
            <set field="orderItemMap" from="orderItem"/>
            <set field="orderItemMap.statusId" from="statusId"/>
            <service-call name="update#org.apache.ofbiz.order.order.OrderItem" in-map="orderItemMap"/>

            <if condition="!statusDateTime">
                <set field="statusDateTime" from="ec.user.nowTimestamp"/>
            </if>
            <!-- Call create#OrderStatus to register the order item cancellation status change event-->
            <service-call name="create#org.apache.ofbiz.order.order.OrderStatus" in-map="[orderId:orderId, orderItemSeqId:orderItemSeqId,
                    statusId:statusId, changeReason:changeReason, statusDatetime:statusDateTime, statusUserLogin:ec.user.getUsername()]"/>

            <!-- Check if the statusId is ITEM_CANCELLED or ITEM_COMPLETED when checkCancelCompleteOrder is true-->
            <if condition="checkCancelCompleteOrder">
                <if condition="orderItem.statusId == 'ITEM_CANCELLED' || orderItem.statusId == 'ITEM_COMPLETED'">
                    <!-- Call checkCancelComplete#Order service to confirm if we need to completely cancel or complete the sales order -->
                    <service-call name="co.hotwax.oms.order.OrderServices.checkCancelComplete#Order" in-map="[orderId:orderId, changeReason:changeReason]"/>
                </if>
            </if>
        </actions>
    </service>

    <service verb="checkCancelComplete" noun="Order">
        <description>This service checks if we need to completely cancel or complete a sales order.</description>
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="changeReason"/>
        </in-parameters>
        <out-parameters>
            <parameter name="oldStatusId"/>
            <parameter name="statusChanged" type="Boolean"/>
        </out-parameters>
        <actions>
            <set field="statusChanged" type="Boolean" value="false"/>
            <entity-find entity-name="org.apache.ofbiz.order.order.OrderItem" list="orderItemList">
                <econdition field-name="orderId"/>
            </entity-find>
            <if condition="!orderItemList">
                <return type="warning" message="OrderItem [ID: ${orderId}] - Not found"/>
            </if>

            <set field="allCancelled" type="Boolean" value="true"/>
            <set field="anyCompleted" type="Boolean" value="false"/>
            <set field="allCancelledOrCompleted" type="Boolean" value="true"/>
            <iterate list="orderItemList" entry="curOrderItem">
                <if condition="curOrderItem.statusId in ['ITEM_REJECTED', 'ITEM_CANCELLED']"><continue/></if>
                <if condition="curOrderItem.statusId == 'ITEM_COMPLETED'">
                    <set field="allCancelled" type="Boolean" value="false"/>
                    <set field="anyCompleted" type="Boolean" value="true"/>
                    <continue/>
                </if>
                <set field="allCancelled" type="Boolean" value="false"/>
                <set field="allCancelledOrCompleted" type="Boolean" value="false"/>
            </iterate>
            <if condition="allCancelled">
                <then>
                    <service-call name="co.hotwax.oms.order.OrderServices.change#OrderStatus" out-map="context" in-map="[orderId:orderId, setItemStatus:false, statusId:'ORDER_CANCELLED']"/>
                </then>
                <else-if condition="anyCompleted &amp;&amp; allCancelledOrCompleted">
                    <service-call name="co.hotwax.oms.order.OrderServices.change#OrderStatus" out-map="context" in-map="[orderId:orderId, setItemStatus:false, statusId:'ORDER_COMPLETED']"/>
                </else-if>
            </if>
        </actions>
    </service>

    <service verb="change" noun="OrderStatus">
        <description>This service validates and then changes the status of a sales order</description>
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="statusId" required="true"/>
            <parameter name="changeReason"/>
            <parameter name="setItemStatus" type="Boolean" default-value="false"/>
        </in-parameters>
        <actions>
            <!-- Validate the orderHeader record -->
            <entity-find-one entity-name="org.apache.ofbiz.order.order.OrderHeader" value-field="orderHeader">
                <field-map field-name="orderId"/>
            </entity-find-one>
            <if condition="!orderHeader">
                <return type="warning" message="OrderHeader [ID: ${orderId}] - Not found"/>
            </if>

            <!-- Update the status of the OrderHeader -->
            <set field="orderHeader.statusId" from="statusId"/>
            <service-call name="update#org.apache.ofbiz.order.order.OrderHeader" in-map="orderHeader" />

            <!-- Create OrderStatus record to register the status change -->
            <service-call name="create#org.apache.ofbiz.order.order.OrderStatus" in-map="[orderId:orderId, statusId:statusId, changeReason:changeReason, statusDatetime:ec.user.nowTimestamp, statusUserLogin:ec.user.getUsername()]"/>

            <if condition="setItemStatus">
                <set field="orderAndItemStatusMapping" from="[ORDER_CREATED:'ITEM_CREATED', ORDER_APPROVED:'ITEM_APPROVED', ORDER_COMPLETED:'ITEM_COMPLETED', ORDER_CANCELLED:'ITEM_CANCELLED', ORDER_EXPIRED:'ITEM_EXPIRED', ORDER_REJECTED:'ITEM_REJECTED', ORDER_HOLD:'ITEM_HOLD']"/>
                <set field="itemStatusId" from="orderAndItemStatusMapping.get(statusId)"/>

                <!-- If setItemStatus is true then get all the order items -->
                <entity-find entity-name="org.apache.ofbiz.order.order.OrderItem" list="orderItemList">
                    <econdition field-name="orderId"/>
                </entity-find>
                <!-- Iterate through the order items and call change#OrderItemStatus service to update their status as well -->
                <iterate list="orderItemList" entry="orderItem">
                    <service-call name="co.hotwax.oms.order.OrderServices.change#OrderItemStatus" in-map="[orderId:orderId, orderItemSeqId:orderItem.orderItemSeqId, statusId:itemStatusId, changeReason:changeReason, statusDateTime:ec.user.nowTimestamp]"/>
                </iterate>
            </if>
        </actions>
    </service>

    <service verb="find" noun="OrderItemShipGroup">
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="facilityId" required="true"/>
            <parameter name="shipmentMethodTypeId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="shipGroupSeqId"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="org.apache.ofbiz.product.facility.Facility" value-field="facility" cache="true"/>
            <!-- Since a new ShipGroup is created for each routing attempt,
                 reuse the existing ShipGroup only if the facility type is "virtual".
                Additionally, filtering based on the shipment method type may be required in future.
            -->
            <set field="hasParentType"
                 from="co.hotwax.oms.util.OmsUtil.hasParentType(ec.ecfi , 'org.apache.ofbiz.product.facility.FacilityType', 'facilityTypeId', facility?.facilityTypeId, 'parentTypeId', 'VIRTUAL_FACILITY')" type="Boolean"/>
            <if condition="hasParentType">
                <entity-find entity-name="org.apache.ofbiz.order.order.OrderItemShipGroup" list="orderItemShipGroups">
                    <econdition field-name="orderId" from="orderId"/>
                    <econdition field-name="facilityId" from="facilityId"/>
                    <econdition field-name="shipmentMethodTypeId" from="shipmentMethodTypeId" ignore-if-empty="true"/>
                    <order-by field-name="shipGroupSeqId DESC"/>
                </entity-find>
                <if condition="orderItemShipGroups">
                    <set field="orderItemShipGroup" from="orderItemShipGroups[0]"/>
                    <set field="shipGroupSeqId" from="orderItemShipGroup.shipGroupSeqId"/>
                    <return/>
                </if>
            </if>
        </actions>
    </service>

    <service verb="reject" noun="OrderItems">
        <description>
            The rejectOrderItems service processes a rejection request for one or more items in an order.
            The rejection logic is driven by two key flags: maySplit and cascadeRejectByProduct, which determine the scope of the rejection.
            Rejection Logic:
            - maySplit = Y, cascadeRejectByProduct = N
              - Reject only the specific item included in the request.
            - maySplit = N, cascadeRejectByProduct = N
              - Reject all items in the same ship group as the specified item.
            - maySplit = Y, cascadeRejectByProduct = Y
              - Reject items with the same productId in the same facility and match the rejection criteria (e.g., shipment not yet packed or shipped).
            - maySplit = N, cascadeRejectByProduct = Y
              - Reject entire ship groups across all orders that contain the specified productId in the same facility, provided the shipment is not yet packed or shipped.
        </description>
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="rejectToFacilityId"/>
            <parameter name="items" type="List" required="true">
                <parameter name="item" type="Map">
                    <parameter name="orderItemSeqId"/>
                    <parameter name="quantity" default-value="1"/>
                    <parameter name="updateQOH"/>
                    <parameter name="maySplit" default-value="N">
                        <description>Whether to allow rejection of individual items or reject the entire ship group. Default is N.</description>
                    </parameter>
                    <parameter name="cascadeRejectByProduct" default-value="N">
                        <description>Whether to reject other items in the order with the same product in the same facility. Default is N.</description>
                    </parameter>
                    <parameter name="comments"/>
                    <parameter name="excludeOrderFacilityDuration"/>
                    <parameter name="rejectionReasonId" required="true"/>
                    <parameter name="kitComponents" type="List">
                        <parameter name="kitProductId"/>
                    </parameter>
                </parameter>
            </parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="cancelledReservations" type="List">
                <parameter name="cancelledReservation">
                    <parameter name="orderId"/>
                    <parameter name="orderItemSeqId"/>
                    <parameter name="shipGroupSeqId"/>
                    <parameter name="inventoryItemId"/>
                    <parameter name="cancelledQuantity" type="BigDecimal"/>
                </parameter>
            </parameter>
        </out-parameters>
        <actions>
            <set field="cancelledReservations" from="[]"/>
            <set field="conditionFactory" from="ec.entity.getConditionFactory()"/>
            <set field="shipmentCondition"
                    from="conditionFactory.makeCondition(
                            conditionFactory.makeCondition('shipmentStatusId', org.moqui.entity.EntityCondition.ComparisonOperator.IN, ['SHIPMENT_INPUT', 'SHIPMENT_APPROVED']),
                                org.moqui.entity.EntityCondition.JoinOperator.OR,
                            conditionFactory.makeCondition('shipmentStatusId', org.moqui.entity.EntityCondition.ComparisonOperator.EQUALS, null)
                        )"/>
            <iterate list="items" entry="item">
                <entity-find-one entity-name="co.hotwax.order.OrderItemAndShipGroup" value-field="orderItem">
                    <field-map field-name="orderId" from="orderId"/>
                    <field-map field-name="orderItemSeqId" from="item.orderItemSeqId"/>
                </entity-find-one>
                <if condition="!orderItem">
                    <return error="true" message="Order item [${orderId}:${item.orderItemSeqId}] not found."/>
                </if>
                <set field="rejectItemCond" from="[]"/>
                <set field="facilityId" from="orderItem.facilityId"/>
                <script>rejectItemCond.add(conditionFactory.makeCondition([facilityId: facilityId, itemStatusId: 'ITEM_APPROVED']))</script>
                <set field="maySplit" from="'Y'.equals(item.maySplit)"/>
                <set field="cascadeRejectByProduct" from="'Y'.equals(item.cascadeRejectByProduct)"/>
                <set field="relatedRejectReasonId" from="item.rejectionReasonId"/>
                <if condition="maySplit">
                    <if condition="cascadeRejectByProduct">
                        <!--maySplit = Y, cascadeRejectByProduct = Y: Reject items with the same product ID, but only those specifically targeted or matching criteria. -->
                        <!-- This query includes all order items in facility with status `ITEM_APPROVED`
                            and no shipment or an early-stage shipment (`SHIPMENT_INPUT` or `SHIPMENT_APPROVED`) -->
                        <script>
                            rejectItemCond.add(conditionFactory.makeCondition([productId: orderItem.productId]))
                            rejectItemCond.add(shipmentCondition)
                        </script>
                        <else>
                            <!--maySplit = Y, cascadeRejectByProduct = N:  Reject only the single item. -->
                            <!-- No shipment status filter -->
                            <script>rejectItemCond.add(conditionFactory.makeCondition([orderId: orderId, orderItemSeqId: item.orderItemSeqId]))</script>
                        </else>
                    </if>
                    <else>
                        <set field="relatedRejectReasonId" value="REJ_AVOID_ORD_SPLIT"/>
                        <if condition="cascadeRejectByProduct">
                            <!-- maySplit = N, cascadeRejectByProduct = Y: Reject entire ship groups for all orders containing the specified product. -->
                            <!--  Utilized Moqui framework's support for subqueries in the WHERE clause.
                                 There are two ways to retrieve all order items that contain a specified product at same facility:
                                   1. Fetch eligible order IDs, then loop through them to get the items at the desired facility.
                                   2. Use a subquery directly in the WHERE clause to filter orders containing the specified product.

                                 Opted for approach #2 as it is more efficient and avoids additional looping logic.
                             -->
                            <!-- This query includes all order items in facility  with status `ITEM_APPROVED`
                                and no shipment or an early-stage shipment (`SHIPMENT_INPUT` or `SHIPMENT_APPROVED`) -->
                            <script>
                                <![CDATA[
                                    rejectItemCond.add(
                                                conditionFactory.makeConditionWhere("""OI.order_ID in ( SELECT DISTINCT OI_INNER.ORDER_ID
                                                    FROM ORDER_ITEM OI_INNER
                                                    INNER JOIN ORDER_ITEM_SHIP_GROUP OISG_INNER ON OI_INNER.ORDER_ID = OISG_INNER.ORDER_ID AND OI_INNER.SHIP_GROUP_SEQ_ID = OISG_INNER.SHIP_GROUP_SEQ_ID
                                                    WHERE  OI_INNER.PRODUCT_ID = '${orderItem.productId}'
                                                    AND OISG_INNER.facility_id = '${facilityId}'
                                                    AND OI_INNER.status_id = 'ITEM_APPROVED')""")
                                            )
                                    rejectItemCond.add(shipmentCondition)
                                    ]]>
                            </script>
                            <else>
                                <!-- maySplit = N, cascadeRejectByProduct = N: Reject all items in the specified ship group.-->
                                <!-- No shipment status filter -->
                                <script>rejectItemCond.add(conditionFactory.makeCondition([orderId: orderId, shipGroupSeqId: orderItem.shipGroupSeqId]))</script>
                            </else>
                        </if>
                    </else>
                </if>
                <entity-find entity-name="co.hotwax.oms.order.OrderItemToRejectView" list="eligibleItems" distinct="true">
                    <econdition-object field="conditionFactory.makeCondition(rejectItemCond)"/>
                </entity-find>
                <iterate list="eligibleItems" entry="eligibleItem">
                    <set field="rejectOrderItemMap" from="item + [orderId: eligibleItem.orderId, orderItemSeqId:eligibleItem.orderItemSeqId, rejectToFacilityId: rejectToFacilityId, excludeOrderFacilityDuration:item.excludeOrderFacilityDuration]"/>
                    <if condition="!(orderItem.orderId == eligibleItem.orderId &amp;&amp; orderItem.orderItemSeqId == eligibleItem.orderItemSeqId)">
                        <set field="rejectOrderItemMap.rejectionReasonId" from="relatedRejectReasonId"/>
                        <if condition="orderItem.productId == eligibleItem.productId &amp;&amp; orderItem.orderId != eligibleItem.orderId">
                            <set field="rejectOrderItemMap.rejectionReasonId" value="REJ_CASCADE_BY_PROD"/>
                        </if>
                        <entity-find-one entity-name="moqui.basic.Enumeration" value-field="rejectionReason" cache="true">
                            <field-map field-name="enumId" from="rejectOrderItemMap.rejectionReasonId"/>
                        </entity-find-one>
                        <set field="rejectOrderItemMap.comments" from="rejectionReason?.description"/>
                    </if>
                    <service-call name="co.hotwax.oms.order.OrderServices.reject#OrderItem"
                                  in-map="rejectOrderItemMap" out-map="outResult"/>
                    <if condition="outResult.cancelledReservations">
                        <script>cancelledReservations.addAll(outResult.cancelledReservations)</script>
                    </if>
                </iterate>
            </iterate>
        </actions>
    </service>
    <service verb="reject" noun="OrderItem">
        <description>Service to reject an order item with various identification methods and record variance details.</description>
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderItemSeqId" required="true"/>
            <parameter name="rejectToFacilityId" default-value="REJECTED_ITM_PARKING"/>
            <parameter name="updateQOH" default-value="false" type="Boolean"/>
            <parameter name="rejectionReasonId" required="true"/>
            <parameter name="comments" />
            <parameter name="excludeOrderFacilityDuration"/>
            <parameter name="kitComponents" type="List">
                <parameter name="kitProductId"/>
            </parameter>
        </in-parameters>
        <out-parameters>
            <!-- Returning a list, as in the case of a marketing package, we also perform reservation for its components.-->
            <parameter name="cancelledReservations" type="List">
                <parameter name="cancelledReservation">
                    <parameter name="orderId"/>
                    <parameter name="orderItemSeqId"/>
                    <parameter name="shipGroupSeqId"/>
                    <parameter name="inventoryItemId"/>
                    <parameter name="cancelledQuantity" type="BigDecimal"/>
                </parameter>
            </parameter>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="org.apache.ofbiz.product.facility.Facility" value-field="rejectToFacility" cache="true">
                <field-map field-name="facilityId" from="rejectToFacilityId"/>
            </entity-find-one>
            <set field="hasParentType"
                 from="co.hotwax.oms.util.OmsUtil.hasParentType(ec.ecfi , 'org.apache.ofbiz.product.facility.FacilityType', 'facilityTypeId', rejectToFacility?.facilityTypeId, 'parentTypeId', 'VIRTUAL_FACILITY')" type="Boolean"/>
            <if condition="!hasParentType">
                <set field="facilityName" from="rejectToFacility != null ? rejectToFacility.facilityName : rejectToFacilityId"/>
                <return error="true" message="Order item [${orderId}:${orderItemSeqId} can't be rejected to non virtual facility ${facilityName}"/>
            </if>
            <!--Fetch shipGroupSeqId of item before processing anything -->
            <entity-find-one entity-name="org.apache.ofbiz.order.order.OrderItem" value-field="orderItem">
                <field-map field-name="orderId" from="orderId"/>
                <field-map field-name="orderItemSeqId" from="orderItemSeqId"/>
            </entity-find-one>

            <set field="shipGroupSeqId" from="orderItem.shipGroupSeqId"/>

            <!--1. Cancel Inventory Reservation call cancel#OrderItemShipGrpInvRes -->
            <service-call name="co.hotwax.oms.impl.OrderReservationServices.cancel#OrderItemInventoryReservation"
                          in-map="[orderId:orderId,orderItemSeqId:orderItemSeqId,cancelQuantity:orderItem.quantity]" out-map="outResult"/>

            <set field="cancelledReservations" from="outResult.cancelledReservations"/>
            <!--2. Move to rejected facility-->
            <entity-find-one entity-name="org.apache.ofbiz.order.order.OrderItemShipGroup" value-field="currentShipGroup">
                <field-map field-name="shipGroupSeqId"/>
                <field-map field-name="orderId" />
            </entity-find-one>
            <if condition="currentShipGroup.shipmentMethodTypeId == 'STOREPICKUP'">
                <set field="rejectToFacilityId" value="PICKUP_REJECTED"/>
            </if>
            <set field="fromFacilityId" from="currentShipGroup.facilityId"/>
            <service-call name="co.hotwax.oms.impl.OrderReservationServices.process#OrderItemAllocation"
                          in-map="[orderId: orderId, orderItemSeqId:orderItemSeqId, facilityId: rejectToFacilityId, quantity: orderItem.quantity,
                          orderFacilityChange: [changeReasonEnumId: rejectionReasonId, comments: comments]]"
                          out-map="outMap"/>

            <!--4. createUpdateExternalFulfillmentOrderItem-->
            <service-call name="store#co.hotwax.integration.order.ExternalFulfillmentOrderItem"
                          in-map="context + [fulfillmentStatus: 'REJECT']"/>

            <!--5. createOrderHistory-->
            <service-call name="create#co.hotwax.customerservice.order.OrderHistory"
                          in-map="context + [eventTypeEnumId: 'ITEM_BKD_REJECTED']"/>

            <!-- TODO: Move this to SECA: Set the facility and fulfillment status in solr doc -->
            <service-call name="co.hotwax.poorti.FulfillmentServices.update#OrderItemFulfillmentStatus"
                          in-map="[orderId:orderId,orderItemSeqId:orderItemSeqId,facilityId:rejectToFacilityId,fulfillmentStatus:'Rejected']"/>
            <!--6. Record inventory variance-->
            <entity-find-one entity-name="moqui.basic.Enumeration" value-field="rejectionEnum" cache="true">
                <field-map field-name="enumId" from="rejectionReasonId"/>
            </entity-find-one>

            <!-- 7 Create ExcludedOrderFacility for item -->
            <if condition="excludeOrderFacilityDuration">
                <set field="excludeDays" from="excludeOrderFacilityDuration" type="Integer"/>
                <if condition="excludeDays &gt; 0">
                    <set field="expiringDateTime" from="ec.user.nowTimestamp + excludeDays"/>
                    <set field="excludedOrderFacility" from="[
                        orderId: orderId,
                        orderItemSeqId: orderItemSeqId,
                        facilityId: fromFacilityId,
                        shipGroupSeqId:shipGroupSeqId,
                        fromDate:ec.user.nowTimestamp,
                        thruDate:expiringDateTime
                    ]"/>
                    <service-call name="create#co.hotwax.facility.ExcludedOrderFacility" in-map="excludedOrderFacility" out-map="excludedOrderFacilityOut"/>
                </if>
            </if>

            <if condition="co.hotwax.oms.util.OmsUtil.hasParentType(ec.ecfi , 'moqui.basic.EnumerationType', 'enumTypeId', rejectionEnum.enumTypeId, 'parentTypeId', 'REPORT_NO_VAR')">
                <return message="Order Item [${orderId}: ${orderItemSeqId}] rejected successfully to facility: $rejectToFacilityId}" type="success"/>
            </if>

            <set field="products" from="[[productId: orderItem.productId, quantity: orderItem.quantity]]"/>

            <!-- Check if item is marketing package then we will need to create variance for its components as well -->
            <entity-find-one entity-name="org.apache.ofbiz.product.product.Product" value-field="product" cache="true">
                <field-map field-name="productId" from="orderItem.productId"/>
            </entity-find-one>
            <set field="hasParentType"
                 from="co.hotwax.oms.util.OmsUtil.hasParentType(ec.ecfi , 'org.apache.ofbiz.product.product.ProductType', 'productTypeId', product?.productTypeId, 'parentTypeId', 'MARKETING_PKG_PICK')" type="Boolean"/>
            <if condition="hasParentType">
                <entity-find entity-name="org.apache.ofbiz.product.product.ProductAssoc" list="components">
                    <econdition field-name="productId" from="orderItem.productId"/>
                    <econdition field-name="productAssocTypeId" value="PRODUCT_COMPONENT"/>
                    <date-filter/>
                </entity-find>
                <if condition="components">
                    <iterate list="components" entry="component">
                        <if condition="kitComponents &amp;&amp; !kitComponents.contains(component.productIdTo)">
                            <continue/>
                        </if>
                        <set field="componentQty" from="(component.quantity?:1) * orderItem.quantity" type="BigDecimal"/>
                        <script>
                            products.add([productId: component.productIdTo, quantity: componentQty])
                        </script>
                    </iterate>
                </if>
            </if>
            <iterate list="products" entry="product">
                <entity-find-one entity-name="co.hotwax.oms.product.inventory.ProductFacilityInventoryItemView"
                                 value-field="productFacility">
                    <field-map field-name="productId" from="product.productId"/>
                    <field-map field-name="facilityId" from="fromFacilityId"/>
                </entity-find-one>
                <set field="varianceQuantity" value="0" type="BigDecimal"/>

                <if condition="co.hotwax.oms.util.OmsUtil.hasParentType(ec.ecfi , 'moqui.basic.EnumerationType', 'enumTypeId', rejectionEnum.enumTypeId, 'parentTypeId', 'REPORT_VAR')">
                    <set field="varianceQuantity" from="product.quantity" type="BigDecimal"/>
                    <else-if
                            condition="co.hotwax.oms.util.OmsUtil.hasParentType(ec.ecfi , 'moqui.basic.EnumerationType', 'enumTypeId', rejectionEnum.enumTypeId, 'parentTypeId', 'REPORT_ALL_VAR')">
                        <set field="varianceQuantity" from="productFacility.lastInventoryCount" type="BigDecimal"/>
                    </else-if>
                </if>
                <!--Run the code to record variance -->
                <if condition="varianceQuantity>0">
                    <!-- These details go in a map placed inside 'inventoryItemVariances' list -->
                    <set field="inventoryItemVarianceMap"
                         from="[inventoryItemId: productFacility.inventoryItemId, reasonEnumId: rejectionReasonId,
                        comments: comments, availableToPromiseVar: varianceQuantity.negate()]"/>

                    <if condition="updateQOH">
                        <set field="inventoryItemVarianceMap.quantityOnHandVar" from="varianceQuantity.negate()"/>
                    </if>
                    <set field="inventoryItemVarianceMap.inventoryItemDetail"
                         from="[orderId: orderId, orderItemSeqId: orderItemSeqId, rejectionReasonId: rejectionReasonId,
                     availableToPromiseDiff : inventoryItemVarianceMap.availableToPromiseVar,  quantityOnHandDiff : inventoryItemVarianceMap.quantityOnHandVar]"/>

                    <!--  These go in top level Map - createPhysicalInventoryMap -->
                    <set field="createPhysicalInventoryMap"
                         from="[partyId:ec.user.getUserAccount()?.partyId, inventoryItemVariances: [inventoryItemVarianceMap]]"/>
                    <!--  Call create Physical Inventory -->
                    <service-call name="co.hotwax.poorti.FulfillmentServices.create#PhysicalInventory"
                                  in-map="createPhysicalInventoryMap" out-map="result"/>

                    <!-- Call find or create cycle count service -->

                    <entity-find-one entity-name="org.apache.ofbiz.order.order.OrderHeader"
                                     value-field="orderHeader">
                        <field-map field-name="orderId" from="orderId"/>
                    </entity-find-one>

                    <entity-find-one entity-name="org.apache.ofbiz.product.store.ProductStoreSetting"
                                     value-field="productStoreSetting">
                        <field-map field-name="settingTypeEnumId" value="REJ_ITM_CC_CRT"/>
                        <field-map field-name="productStoreId" from="orderHeader.productStoreId"/>
                    </entity-find-one>

                    <set field="rejectedItemSettingValue" from="productStoreSetting?.settingValue"/>

                    <if condition="rejectedItemSettingValue=='true'">
                        <service-call name="co.hotwax.cycleCount.InventoryCountServices.findOrCreate#RejectedItemCycleCount"
                                      in-map="[productId: product.productId, facilityId: fromFacilityId]" out-map="cycleCount"/>
                    </if>

                </if>
            </iterate>
        </actions>
    </service>

    <service verb="delete" noun="OrderItemReservations">
        <description>Delete order item reservation on item completion using seca rule. As we removed logic to delete reservation on item issuance.</description>
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="orderItemSeqId" required="true"/>
        </in-parameters>
        <actions>
            <entity-find entity-name="org.apache.ofbiz.order.order.OrderItemShipGrpInvRes" list="oisgirs">
                <econdition field-name="orderId"/>
                <econdition field-name="orderItemSeqId"/>
            </entity-find>
            <if condition="oisgirs">
                <iterate list="oisgirs" entry="oisgir">
                    <service-call name="delete#org.apache.ofbiz.order.order.OrderItemShipGrpInvRes"
                                  in-map="oisgir"
                                  out-map="removedReservations"/>
                </iterate>
            </if>
        </actions>
    </service>

    <!-- This service marks order item completed on shipment shipped. Here we are considering that its OMS responsibility to mark item complete on fulfillment done, so we are adding this service in oms -->
    <!-- Main actions of this service
       - complete order item
       - Complete order if all items has been completed
       - Call service to notify Shopify on item completion
       - Trigger service to send completed order feed to location for further processing by Nifi/ERP systems if needed
    -->
    <service verb="complete" noun="SalesOrderItemByShipment" authenticate="anonymous-all">
        <description>
            Update the Order Item status to ITEM_COMPLETED for all the items of the Sales Order Shipment.
        </description>
        <in-parameters>
            <parameter name="shipmentId" required="true"/>
        </in-parameters>
        <actions>
            <entity-find entity-name="org.apache.ofbiz.order.order.OrderShipment" list="orderShipmentList" distinct="true">
                <econdition field-name="shipmentId"/>
                <select-field field-name="orderId,orderItemSeqId"/>
            </entity-find>
            <!-- Adding below handling for the scenario of shipments containing items of multiple orders  -->
            <set field="orderIdSet" from="new HashSet(orderShipmentList*.orderId)"/>

            <iterate list="orderIdSet" entry="orderId">
                <filter-map-list list="orderShipmentList" to-list="shipmentOrderItemList">
                    <field-map field-name="orderId"/>
                </filter-map-list>
                <iterate list="shipmentOrderItemList" entry="shipmentOrderItem">
                    <!-- Update order item status to completed -->
                    <service-call name="co.hotwax.oms.order.OrderServices.change#OrderItemStatus"
                                  in-map="[orderId:shipmentOrderItem.orderId, orderItemSeqId:shipmentOrderItem.orderItemSeqId,
                            statusId:'ITEM_COMPLETED', checkCancelCompleteOrder:false, statusDatetime:ec.user.nowTimestamp]"/>
                </iterate>
                <!-- Call checkCancelComplete#Order service to confirm if we need to mark the sales order as completed -->
                <service-call name="co.hotwax.oms.order.OrderServices.checkCancelComplete#Order" in-map="[orderId:orderId]"/>

                <!-- Now call service to inform Shopify about fulfillment complete.
                  - Calling this service inline in async mode to inform shopify about fulfillment.
                -->
                <entity-find entity-name="co.hotwax.common.WebhookConfig" list="webhookConfig" limit="1">
                    <econdition field-name="topicEnumId" value="WEBHOOK_SHIP_SHIPPED"/>
                </entity-find>
                <if condition="webhookConfig &amp;&amp; webhookConfig.remoteUrl != null">
                    <service-call name="co.hotwax.sob.fulfillment.FulfillmentFeedServices.post#ShopifyFulfillment" in-map="[shipmentId:shipmentId]" async="true"/>
                </if>
            </iterate>
        </actions>
    </service>
    <service verb="send" noun="OrderWebhook" type="oms-rest" location="service/sendOrderWebhook" method="post" transaction-timeout="180" authenticate="anonymous-view">
        <description>Send order related webhook to remote url</description>
        <in-parameters>
            <parameter name="orderId" required="true"/>
            <parameter name="topicEnumId" required="true"/>
        </in-parameters>
    </service>
</services>
