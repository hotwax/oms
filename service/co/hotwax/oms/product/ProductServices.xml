<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">

    <!--I don't like the findOrCreate pattern, but don't have better suggestion -->
    <!--The service noun should be ProductInventoryItem, as we are fetching product inventory item at facility  -->
    <service verb="findOrCreate" noun="FacilityInventoryItem">
        <description>
            This service finds or creates an inventory item for a given product and facility.
            It ensures that the ProductFacility record exist before associating them with an inventory item.
        </description>
        <in-parameters>
            <parameter name="facilityId">
                <description>
                    The internal identifier of the facility.
                    If not provided, externalFacilityId is used to find the facility.
                </description>
            </parameter>
            <parameter name="externalFacilityId">
                <description>
                    The external identifier of the facility.
                    Used to find the facility when facilityId is not provided.
                </description>
            </parameter>
            <parameter name="productId">
                <description>
                    The internal identifier of the product.
                    If not provided, productIdentType and productIdentValue are used to find the product.
                </description>
            </parameter>
            <parameter name="productIdentType">
                <description>
                    The identification type (e.g., SKU, UPCA) for the product.
                    Required if productId is not provided.
                </description>
            </parameter>
            <parameter name="productIdentValue">
                <description>
                    The identification value corresponding to productIdentType.
                    Required if productId is not provided.
                </description>
            </parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="productId"/>
            <parameter name="facilityId"/>
            <parameter name="inventoryItemId"/>
        </out-parameters>
        <actions>
            <if condition="!productId">
                <entity-find entity-name="org.apache.ofbiz.product.product.GoodIdentification" list="goodIdentifications" cache="true">
                    <econdition field-name="goodIdentificationTypeId" from="productIdentType"/>
                    <econdition field-name="idValue" from="productIdentValue"/>
                    <date-filter/>
                </entity-find>
                <if condition="!goodIdentifications">
                    <return error="true" message="Could not find product with ident type ${productIdentType} and value ${productIdentValue}"/>
                </if>
                <set field="productId" from="goodIdentifications?goodIdentifications[0].productId:null"/>
            </if>
            <if condition="!facilityId">
                <entity-find entity-name="org.apache.ofbiz.product.facility.Facility" list="facilities" cache="true">
                    <econdition field-name="externalId" from="externalFacilityId"/>
                </entity-find>
                <if condition="!facilities">
                    <return error="true" message="Could not find facility with external ID ${externalFacilityId}"/>
                </if>
                <set field="facilityId" from="facilities?facilities[0].facilityId:null"/>
            </if>
            <entity-find-one entity-name="org.apache.ofbiz.product.facility.Facility" value-field="facility" cache="true"/>
            <set field="hasParentType"
                 from="co.hotwax.oms.util.OmsUtil.hasParentType(ec.ecfi , 'org.apache.ofbiz.product.facility.FacilityType', 'facilityTypeId', facility.facilityTypeId, 'parentTypeId', 'VIRTUAL_FACILITY')" type="Boolean"/>
            <if condition="hasParentType">
                <return error="true" message="Facility [ID: ${facilityId} is virtual facility."/>
            </if>
            <entity-find-one entity-name="org.apache.ofbiz.product.facility.ProductFacility" value-field="productFacility">
                <field-map field-name="productId" from="productId"/>
                <field-map field-name="facilityId" from="facilityId"/>
            </entity-find-one>

            <if condition="productFacility &amp;&amp; productFacility.inventoryItemId">
                <set field="inventoryItemId" from="productFacility.inventoryItemId"/>
                <else>
                    <entity-find entity-name="org.apache.ofbiz.product.facility.FacilityLocation" list="facilityLocations" cache="true">
                        <econdition field-name="facilityId" from="facilityId"/>
                        <econdition field-name="locationTypeEnumId" value="FLT_PICKLOC"/>
                    </entity-find>
                    <set field="inventoryItemMap" from="[
                            productId: productId,
                            availableToPromiseTotal: 0,
                            quantityOnHandTotal: 0,
                            facilityId: facilityId,
                            inventoryItemTypeId: 'NON_SERIAL_INV_ITEM'
                        ]"/>
                    <if condition="facilityLocations">
                        <set field="inventoryItemMap.locationSeqId" from="facilityLocations[0].locationSeqId"/>
                        <else>
                            <set field="inventoryItemMap.locationSeqId" value="TLTLTLLL01"/>
                        </else>
                    </if>
                    <service-call name="create#org.apache.ofbiz.product.inventory.InventoryItem" in-map="inventoryItemMap" out-map="inventoryItemOut"/>
                    <set field="inventoryItemId" from="inventoryItemOut.inventoryItemId"/>
                    <if condition="!productFacility">
                        <set field="productFacilityMap" from="[productId: productId, facilityId: facilityId, inventoryItemId: inventoryItemId]"/>
                        <service-call name="create#org.apache.ofbiz.product.facility.ProductFacility" in-map="productFacilityMap" out-map="productFacilityOut"/>
                        <set field="productFacility" from="productFacilityOut"/>
                        <else>
                            <set field="productFacility.inventoryItemId" from="inventoryItemId"/>
                            <service-call name="update#org.apache.ofbiz.product.facility.ProductFacility" in-map="productFacility"/>
                        </else>
                    </if>
                </else>
            </if>
        </actions>
    </service>
    <service verb="update" noun="ProductFacility">
        <in-parameters>
            <auto-parameters entity-name="org.apache.ofbiz.product.facility.ProductFacility" include="pk" required="true"/>
            <auto-parameters entity-name="org.apache.ofbiz.product.facility.ProductFacility" include="nonpk"/>
        </in-parameters>
        <out-parameters>
            <auto-parameters entity-name="org.apache.ofbiz.product.facility.ProductFacility" include="pk"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="org.apache.ofbiz.product.facility.ProductFacility" value-field="lookedUpValue" for-update="true"/>
            <if condition="lookedUpValue">
                <entity-set value-field="lookedUpValue"/>
                <set field="computedLastInventoryCount" value="0" type="BigDecimal"/>
                <set field="lastInventoryCount" from="lookedUpValue.lastInventoryCount" type="BigDecimal" default-value="0"/>
                <set field="minimumStock" from="lookedUpValue.minimumStock" type="BigDecimal" default-value="0"/>
                <if condition="lastInventoryCount >= minimumStock">
                    <set field="computedLastInventoryCount" from="lastInventoryCount - minimumStock" type="BigDecimal"/>
                </if>
                <set field="lookedUpValue.computedLastInventoryCount" from="computedLastInventoryCount"/>
                <entity-update value-field="lookedUpValue"/>
            </if>
        </actions>
    </service>
</services>